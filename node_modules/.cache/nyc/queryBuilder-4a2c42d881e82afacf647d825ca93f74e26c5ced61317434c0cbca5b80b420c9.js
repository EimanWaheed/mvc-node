function cov_1h0vuzc1b5(){var path="/var/www/html/mvc-node/core/models/database/driver/mysqli/queryBuilder.js";var hash="f783b4df247ef5de8a36789224f70a745c9bea21";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/mvc-node/core/models/database/driver/mysqli/queryBuilder.js",statementMap:{"0":{start:{line:20,column:24},end:{line:20,column:26}},"1":{start:{line:20,column:42},end:{line:20,column:44}},"2":{start:{line:21,column:8},end:{line:26,column:9}},"3":{start:{line:22,column:12},end:{line:25,column:13}},"4":{start:{line:23,column:16},end:{line:23,column:39}},"5":{start:{line:24,column:16},end:{line:24,column:61}},"6":{start:{line:27,column:8},end:{line:27,column:65}},"7":{start:{line:28,column:8},end:{line:28,column:71}},"8":{start:{line:29,column:8},end:{line:29,column:90}},"9":{start:{line:41,column:24},end:{line:41,column:26}},"10":{start:{line:42,column:26},end:{line:42,column:50}},"11":{start:{line:43,column:8},end:{line:47,column:9}},"12":{start:{line:44,column:12},end:{line:46,column:13}},"13":{start:{line:45,column:16},end:{line:45,column:71}},"14":{start:{line:48,column:8},end:{line:48,column:65}},"15":{start:{line:49,column:8},end:{line:49,column:87}},"16":{start:{line:61,column:26},end:{line:61,column:50}},"17":{start:{line:62,column:8},end:{line:62,column:77}},"18":{start:{line:74,column:8},end:{line:74,column:53}},"19":{start:{line:77,column:0},end:{line:77,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:19},end:{line:30,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:19},end:{line:50,column:5}},line:40},"2":{name:"(anonymous_2)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:19},end:{line:63,column:5}},line:60},"3":{name:"(anonymous_3)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:17},end:{line:75,column:5}},line:73}},branchMap:{"0":{loc:{start:{line:22,column:12},end:{line:25,column:13}},type:"if",locations:[{start:{line:22,column:12},end:{line:25,column:13}},{start:{line:22,column:12},end:{line:25,column:13}}],line:22},"1":{loc:{start:{line:22,column:16},end:{line:22,column:49}},type:"binary-expr",locations:[{start:{line:22,column:16},end:{line:22,column:34}},{start:{line:22,column:38},end:{line:22,column:49}}],line:22},"2":{loc:{start:{line:44,column:12},end:{line:46,column:13}},type:"if",locations:[{start:{line:44,column:12},end:{line:46,column:13}},{start:{line:44,column:12},end:{line:46,column:13}}],line:44}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f783b4df247ef5de8a36789224f70a745c9bea21"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1h0vuzc1b5=function(){return actualCoverage;};}return actualCoverage;}cov_1h0vuzc1b5();/**
 * Class representing CRUD operations which will be responsible for generating 
 * sql queries and returning them for all the CRUD operations i.e, create, delete,
 * list and update. These CRUD operations are performed for the specific entity which
 * has key value pair. After these queries are generated dynamically, they are returned.
 * This class is responsible for generating and building the queries dynamically for
 * the purpose of further executing it.
 */class QueryBuilder{/**
     * Forms the insert sql query for inserting records in database. The query is
     * generated by making the strings of keys and values which are obtained from the
     * entity object which is passed as a parameter in the method. After the insert query
     * is generated then it is returned which will be executed later.
     * @param {Object} entity 
     * @returns {string} the sql query.
     */create(entity){cov_1h0vuzc1b5().f[0]++;let keyString=(cov_1h0vuzc1b5().s[0]++,""),valueString=(cov_1h0vuzc1b5().s[1]++,"");cov_1h0vuzc1b5().s[2]++;for(const key in entity){cov_1h0vuzc1b5().s[3]++;if((cov_1h0vuzc1b5().b[1][0]++,key!='tableName')&&(cov_1h0vuzc1b5().b[1][1]++,key!='id')){cov_1h0vuzc1b5().b[0][0]++;cov_1h0vuzc1b5().s[4]++;keyString+=key+',';cov_1h0vuzc1b5().s[5]++;valueString+="'"+entity[key]+"'"+',';}else{cov_1h0vuzc1b5().b[0][1]++;}}cov_1h0vuzc1b5().s[6]++;keyString=keyString.substring(0,keyString.length-1);cov_1h0vuzc1b5().s[7]++;valueString=valueString.substring(0,valueString.length-1);cov_1h0vuzc1b5().s[8]++;return`INSERT INTO ${entity.tableName} (${keyString}) VALUES (${valueString})`;}/**
    * Forms the update sql query for updating records of database. The query is
    * generated by making the strings of keys and values which are obtained from the
    * entity object which is passed as a parameter in the method. After the update query
    * is generated then it is returned which will be executed later.
    * @param {Object} entity 
    * @returns {string} the sql query.
    */update(entity){cov_1h0vuzc1b5().f[1]++;let keyString=(cov_1h0vuzc1b5().s[9]++,"");let valueString=(cov_1h0vuzc1b5().s[10]++,"'"+entity['id']+"'");cov_1h0vuzc1b5().s[11]++;for(const key in entity){cov_1h0vuzc1b5().s[12]++;if(key!='tableName'){cov_1h0vuzc1b5().b[2][0]++;cov_1h0vuzc1b5().s[13]++;keyString+=key+'='+"'"+entity[key]+"'"+',';}else{cov_1h0vuzc1b5().b[2][1]++;}}cov_1h0vuzc1b5().s[14]++;keyString=keyString.substring(0,keyString.length-1);cov_1h0vuzc1b5().s[15]++;return`UPDATE ${entity.tableName} SET ${keyString} WHERE id=${valueString}`;}/**
    * Forms the delete sql query for deleting records from database based on the id column. 
    * The query is generated by making the strings of keys and values which are obtained 
    * from the entity object which is passed as a parameter in the method. After the delete 
    * query is generated then it is returned which will be executed later.
    * @param {Object} entity 
    * @returns {string} the sql query.
    */delete(entity){cov_1h0vuzc1b5().f[2]++;let valueString=(cov_1h0vuzc1b5().s[16]++,"'"+entity['id']+"'");cov_1h0vuzc1b5().s[17]++;return`DELETE FROM ${entity.tableName} WHERE id=(${valueString})`;}/**
    * Forms the select sql query for fetching all the records from database. 
    * The query is generated by taking the table name which is obtained from the entity object 
    * which is passed as a parameter in the method. After the select query is generated then it 
    * is returned which will be executed later.
    * @param {object} entity 
    * @returns {string} the sql query.
    */list(entity){cov_1h0vuzc1b5().f[3]++;cov_1h0vuzc1b5().s[18]++;return`SELECT * FROM ${entity.tableName}`;}}cov_1h0vuzc1b5().s[19]++;module.exports=QueryBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5QnVpbGRlci5qcyJdLCJuYW1lcyI6WyJRdWVyeUJ1aWxkZXIiLCJjcmVhdGUiLCJlbnRpdHkiLCJrZXlTdHJpbmciLCJ2YWx1ZVN0cmluZyIsImtleSIsInN1YnN0cmluZyIsImxlbmd0aCIsInRhYmxlTmFtZSIsInVwZGF0ZSIsImRlbGV0ZSIsImxpc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiMmlHQWVZOzJGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNQSxDQUFBQSxZQUFhLENBRWY7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJQyxNQUFNLENBQUNDLE1BQUQsQ0FBUyx5QkFDWCxHQUFJQyxDQUFBQSxTQUFTLDBCQUFHLEVBQUgsQ0FBYixDQUFvQkMsV0FBVywwQkFBRyxFQUFILENBQS9CLENBRFcsd0JBRVgsSUFBSyxLQUFNQyxDQUFBQSxHQUFYLEdBQWtCSCxDQUFBQSxNQUFsQixDQUEwQix5QkFDdEIsR0FBSSw0QkFBQUcsR0FBRyxFQUFJLFdBQVAsK0JBQXNCQSxHQUFHLEVBQUksSUFBN0IsQ0FBSixDQUF1QyxvREFDbkNGLFNBQVMsRUFBSUUsR0FBRyxDQUFHLEdBQW5CLENBRG1DLHdCQUVuQ0QsV0FBVyxFQUFJLElBQU1GLE1BQU0sQ0FBQ0csR0FBRCxDQUFaLENBQW9CLEdBQXBCLENBQTBCLEdBQXpDLENBQ0gsQ0FIRCxpQ0FJSCxDQVBVLHdCQVFYRixTQUFTLENBQUdBLFNBQVMsQ0FBQ0csU0FBVixDQUFvQixDQUFwQixDQUF1QkgsU0FBUyxDQUFDSSxNQUFWLENBQW1CLENBQTFDLENBQVosQ0FSVyx3QkFTWEgsV0FBVyxDQUFHQSxXQUFXLENBQUNFLFNBQVosQ0FBc0IsQ0FBdEIsQ0FBeUJGLFdBQVcsQ0FBQ0csTUFBWixDQUFxQixDQUE5QyxDQUFkLENBVFcsd0JBVVgsTUFBUyxlQUFjTCxNQUFNLENBQUNNLFNBQVUsS0FBSUwsU0FBVSxhQUFZQyxXQUFZLEdBQTlFLENBQ0gsQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQ0lLLE1BQU0sQ0FBQ1AsTUFBRCxDQUFTLHlCQUNYLEdBQUlDLENBQUFBLFNBQVMsMEJBQUcsRUFBSCxDQUFiLENBQ0EsR0FBSUMsQ0FBQUEsV0FBVywyQkFBRyxJQUFNRixNQUFNLENBQUMsSUFBRCxDQUFaLENBQXFCLEdBQXhCLENBQWYsQ0FGVyx5QkFHWCxJQUFLLEtBQU1HLENBQUFBLEdBQVgsR0FBa0JILENBQUFBLE1BQWxCLENBQTBCLDBCQUN0QixHQUFJRyxHQUFHLEVBQUksV0FBWCxDQUF3QixxREFDcEJGLFNBQVMsRUFBSUUsR0FBRyxDQUFHLEdBQU4sQ0FBWSxHQUFaLENBQWtCSCxNQUFNLENBQUNHLEdBQUQsQ0FBeEIsQ0FBZ0MsR0FBaEMsQ0FBc0MsR0FBbkQsQ0FDSCxDQUZELGlDQUdILENBUFUseUJBUVhGLFNBQVMsQ0FBR0EsU0FBUyxDQUFDRyxTQUFWLENBQW9CLENBQXBCLENBQXVCSCxTQUFTLENBQUNJLE1BQVYsQ0FBbUIsQ0FBMUMsQ0FBWixDQVJXLHlCQVNYLE1BQVMsVUFBU0wsTUFBTSxDQUFDTSxTQUFVLFFBQU9MLFNBQVUsYUFBWUMsV0FBWSxFQUE1RSxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUNJTSxNQUFNLENBQUNSLE1BQUQsQ0FBUyx5QkFDWCxHQUFJRSxDQUFBQSxXQUFXLDJCQUFHLElBQU1GLE1BQU0sQ0FBQyxJQUFELENBQVosQ0FBcUIsR0FBeEIsQ0FBZixDQURXLHlCQUVYLE1BQVMsZUFBY0EsTUFBTSxDQUFDTSxTQUFVLGNBQWFKLFdBQVksR0FBakUsQ0FDSCxDQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFDSU8sSUFBSSxDQUFDVCxNQUFELENBQVMsa0RBQ1QsTUFBUyxpQkFBZ0JBLE1BQU0sQ0FBQ00sU0FBVSxFQUExQyxDQUNILENBbEVjLEMseUJBb0VuQkksTUFBTSxDQUFDQyxPQUFQLENBQWlCYixZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIENSVUQgb3BlcmF0aW9ucyB3aGljaCB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIFxuICogc3FsIHF1ZXJpZXMgYW5kIHJldHVybmluZyB0aGVtIGZvciBhbGwgdGhlIENSVUQgb3BlcmF0aW9ucyBpLmUsIGNyZWF0ZSwgZGVsZXRlLFxuICogbGlzdCBhbmQgdXBkYXRlLiBUaGVzZSBDUlVEIG9wZXJhdGlvbnMgYXJlIHBlcmZvcm1lZCBmb3IgdGhlIHNwZWNpZmljIGVudGl0eSB3aGljaFxuICogaGFzIGtleSB2YWx1ZSBwYWlyLiBBZnRlciB0aGVzZSBxdWVyaWVzIGFyZSBnZW5lcmF0ZWQgZHluYW1pY2FsbHksIHRoZXkgYXJlIHJldHVybmVkLlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBhbmQgYnVpbGRpbmcgdGhlIHF1ZXJpZXMgZHluYW1pY2FsbHkgZm9yXG4gKiB0aGUgcHVycG9zZSBvZiBmdXJ0aGVyIGV4ZWN1dGluZyBpdC5cbiAqL1xuY2xhc3MgUXVlcnlCdWlsZGVyIHtcblxuICAgIC8qKlxuICAgICAqIEZvcm1zIHRoZSBpbnNlcnQgc3FsIHF1ZXJ5IGZvciBpbnNlcnRpbmcgcmVjb3JkcyBpbiBkYXRhYmFzZS4gVGhlIHF1ZXJ5IGlzXG4gICAgICogZ2VuZXJhdGVkIGJ5IG1ha2luZyB0aGUgc3RyaW5ncyBvZiBrZXlzIGFuZCB2YWx1ZXMgd2hpY2ggYXJlIG9idGFpbmVkIGZyb20gdGhlXG4gICAgICogZW50aXR5IG9iamVjdCB3aGljaCBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlIG1ldGhvZC4gQWZ0ZXIgdGhlIGluc2VydCBxdWVyeVxuICAgICAqIGlzIGdlbmVyYXRlZCB0aGVuIGl0IGlzIHJldHVybmVkIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgbGF0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVudGl0eSBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgc3FsIHF1ZXJ5LlxuICAgICAqL1xuICAgIGNyZWF0ZShlbnRpdHkpIHtcbiAgICAgICAgbGV0IGtleVN0cmluZyA9IFwiXCIsIHZhbHVlU3RyaW5nID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZW50aXR5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9ICd0YWJsZU5hbWUnICYmIGtleSAhPSAnaWQnKSB7XG4gICAgICAgICAgICAgICAga2V5U3RyaW5nICs9IGtleSArICcsJztcbiAgICAgICAgICAgICAgICB2YWx1ZVN0cmluZyArPSBcIidcIiArIGVudGl0eVtrZXldICsgXCInXCIgKyAnLCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5U3RyaW5nID0ga2V5U3RyaW5nLnN1YnN0cmluZygwLCBrZXlTdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgICAgIHZhbHVlU3RyaW5nID0gdmFsdWVTdHJpbmcuc3Vic3RyaW5nKDAsIHZhbHVlU3RyaW5nLmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gKGBJTlNFUlQgSU5UTyAke2VudGl0eS50YWJsZU5hbWV9ICgke2tleVN0cmluZ30pIFZBTFVFUyAoJHt2YWx1ZVN0cmluZ30pYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBGb3JtcyB0aGUgdXBkYXRlIHNxbCBxdWVyeSBmb3IgdXBkYXRpbmcgcmVjb3JkcyBvZiBkYXRhYmFzZS4gVGhlIHF1ZXJ5IGlzXG4gICAgKiBnZW5lcmF0ZWQgYnkgbWFraW5nIHRoZSBzdHJpbmdzIG9mIGtleXMgYW5kIHZhbHVlcyB3aGljaCBhcmUgb2J0YWluZWQgZnJvbSB0aGVcbiAgICAqIGVudGl0eSBvYmplY3Qgd2hpY2ggaXMgcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGluIHRoZSBtZXRob2QuIEFmdGVyIHRoZSB1cGRhdGUgcXVlcnlcbiAgICAqIGlzIGdlbmVyYXRlZCB0aGVuIGl0IGlzIHJldHVybmVkIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgbGF0ZXIuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZW50aXR5IFxuICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHNxbCBxdWVyeS5cbiAgICAqL1xuICAgIHVwZGF0ZShlbnRpdHkpIHtcbiAgICAgICAgbGV0IGtleVN0cmluZyA9IFwiXCI7XG4gICAgICAgIGxldCB2YWx1ZVN0cmluZyA9IFwiJ1wiICsgZW50aXR5WydpZCddICsgXCInXCI7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGVudGl0eSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSAndGFibGVOYW1lJykge1xuICAgICAgICAgICAgICAgIGtleVN0cmluZyArPSBrZXkgKyAnPScgKyBcIidcIiArIGVudGl0eVtrZXldICsgXCInXCIgKyAnLCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5U3RyaW5nID0ga2V5U3RyaW5nLnN1YnN0cmluZygwLCBrZXlTdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiAoYFVQREFURSAke2VudGl0eS50YWJsZU5hbWV9IFNFVCAke2tleVN0cmluZ30gV0hFUkUgaWQ9JHt2YWx1ZVN0cmluZ31gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZvcm1zIHRoZSBkZWxldGUgc3FsIHF1ZXJ5IGZvciBkZWxldGluZyByZWNvcmRzIGZyb20gZGF0YWJhc2UgYmFzZWQgb24gdGhlIGlkIGNvbHVtbi4gXG4gICAgKiBUaGUgcXVlcnkgaXMgZ2VuZXJhdGVkIGJ5IG1ha2luZyB0aGUgc3RyaW5ncyBvZiBrZXlzIGFuZCB2YWx1ZXMgd2hpY2ggYXJlIG9idGFpbmVkIFxuICAgICogZnJvbSB0aGUgZW50aXR5IG9iamVjdCB3aGljaCBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlIG1ldGhvZC4gQWZ0ZXIgdGhlIGRlbGV0ZSBcbiAgICAqIHF1ZXJ5IGlzIGdlbmVyYXRlZCB0aGVuIGl0IGlzIHJldHVybmVkIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgbGF0ZXIuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZW50aXR5IFxuICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHNxbCBxdWVyeS5cbiAgICAqL1xuICAgIGRlbGV0ZShlbnRpdHkpIHtcbiAgICAgICAgbGV0IHZhbHVlU3RyaW5nID0gXCInXCIgKyBlbnRpdHlbJ2lkJ10gKyBcIidcIjtcbiAgICAgICAgcmV0dXJuIChgREVMRVRFIEZST00gJHtlbnRpdHkudGFibGVOYW1lfSBXSEVSRSBpZD0oJHt2YWx1ZVN0cmluZ30pYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBGb3JtcyB0aGUgc2VsZWN0IHNxbCBxdWVyeSBmb3IgZmV0Y2hpbmcgYWxsIHRoZSByZWNvcmRzIGZyb20gZGF0YWJhc2UuIFxuICAgICogVGhlIHF1ZXJ5IGlzIGdlbmVyYXRlZCBieSB0YWtpbmcgdGhlIHRhYmxlIG5hbWUgd2hpY2ggaXMgb2J0YWluZWQgZnJvbSB0aGUgZW50aXR5IG9iamVjdCBcbiAgICAqIHdoaWNoIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUgbWV0aG9kLiBBZnRlciB0aGUgc2VsZWN0IHF1ZXJ5IGlzIGdlbmVyYXRlZCB0aGVuIGl0IFxuICAgICogaXMgcmV0dXJuZWQgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBsYXRlci5cbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBlbnRpdHkgXG4gICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgc3FsIHF1ZXJ5LlxuICAgICovXG4gICAgbGlzdChlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIChgU0VMRUNUICogRlJPTSAke2VudGl0eS50YWJsZU5hbWV9YCk7XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeUJ1aWxkZXI7Il19