function cov_23lkxee2vi(){var path="/home/eiman.waheed/Desktop/mvc-node/core/models/database/dbFactory.js";var hash="dfa2112856b3f07d907ccb8f690924af6ad3c518";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/models/database/dbFactory.js",statementMap:{"0":{start:{line:8,column:0},end:{line:41,column:1}},"1":{start:{line:18,column:8},end:{line:23,column:9}},"2":{start:{line:19,column:12},end:{line:19,column:128}},"3":{start:{line:22,column:12},end:{line:22,column:73}},"4":{start:{line:34,column:8},end:{line:39,column:9}},"5":{start:{line:35,column:12},end:{line:35,column:126}},"6":{start:{line:38,column:12},end:{line:38,column:79}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:17},end:{line:24,column:5}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:23},end:{line:40,column:5}},line:33}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dfa2112856b3f07d907ccb8f690924af6ad3c518"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23lkxee2vi=function(){return actualCoverage;};}return actualCoverage;}cov_23lkxee2vi();cov_23lkxee2vi().s[0]++;/** 
 * Class representing the Database Factory for building specified driver and querybuilder as it implements 
 * Database Abstraction Layer by acquiring database name through environment variable. It is responsible for 
 * building the specified driver and querybuilder objects. Factory Design Pattern is used in this class for 
 * creating desired objects polymorphically. The object made is defined already and thus the required instance 
 * is returned.
 */module.exports=class DbFactory{/**
     * Creates the driver of database type specified in the environment variable and returns it which is 
     * mandatory for executing the query, without this object it is not possible to execute the CRUD 
     * operations. Error handling is also done in the case if the driver is not created due to some reasons,
     * just throw the error specifying the problem message.
     * @returns {Object} The driver instance.
     */loadDriver(){cov_23lkxee2vi().f[0]++;cov_23lkxee2vi().s[1]++;try{cov_23lkxee2vi().s[2]++;return require(`${process.env.FILEPATH}/core/models/database/driver/${process.env.DBNAME}/driver.js`).getInstance();}catch(error){cov_23lkxee2vi().s[3]++;throw new Error(`${process.env.DBNAME} driver not created.`);}}/**
     * Creates the querybuilder of database type specified in the environment variable and returns it which is 
     * mandatory for generating the query, without this object it is not possible to build the query for the CRUD 
     * operations. Error handling is also done in the case if the querybuilder is not created due to some reasons,
     * just throw the error specifying the problem message.
     * @returns {Object} The driver instance.
     */loadQueryBuilder(){cov_23lkxee2vi().f[1]++;cov_23lkxee2vi().s[4]++;try{cov_23lkxee2vi().s[5]++;return new(require(`${process.env.FILEPATH}/core/models/database/driver/${process.env.DBNAME}/queryBuilder.js`))();}catch(error){cov_23lkxee2vi().s[6]++;throw new Error(`${process.env.DBNAME} querybuilder not created.`);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiRmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRGJGYWN0b3J5IiwibG9hZERyaXZlciIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiRklMRVBBVEgiLCJEQk5BTUUiLCJnZXRJbnN0YW5jZSIsImVycm9yIiwiRXJyb3IiLCJsb2FkUXVlcnlCdWlsZGVyIl0sIm1hcHBpbmdzIjoiaTFDQWVZO21IQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixLQUFNQyxDQUFBQSxTQUFVLENBRTdCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLFVBQVUsRUFBRyxpREFDVCxHQUFJLHlCQUNBLE1BQU9DLENBQUFBLE9BQU8sQ0FBRSxHQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBUyxnQ0FBK0JGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxNQUFPLFlBQTNFLENBQVAsQ0FBK0ZDLFdBQS9GLEVBQVAsQ0FDSCxDQUNELE1BQU9DLEtBQVAsQ0FBYyx5QkFDVixLQUFNLElBQUlDLENBQUFBLEtBQUosQ0FBVyxHQUFFTixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsTUFBTyxzQkFBaEMsQ0FBTixDQUNILENBQ0osQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJSSxnQkFBZ0IsRUFBRyxpREFDZixHQUFJLHlCQUNBLE1BQU8sS0FBS1IsT0FBTyxDQUFFLEdBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLGdDQUErQkYsT0FBTyxDQUFDQyxHQUFSLENBQVlFLE1BQU8sa0JBQTNFLENBQVosR0FBUCxDQUNILENBQ0QsTUFBT0UsS0FBUCxDQUFjLHlCQUNWLEtBQU0sSUFBSUMsQ0FBQUEsS0FBSixDQUFXLEdBQUVOLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxNQUFPLDRCQUFoQyxDQUFOLENBQ0gsQ0FDSixDQWhDNEIsQ0FBakMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgdGhlIERhdGFiYXNlIEZhY3RvcnkgZm9yIGJ1aWxkaW5nIHNwZWNpZmllZCBkcml2ZXIgYW5kIHF1ZXJ5YnVpbGRlciBhcyBpdCBpbXBsZW1lbnRzIFxuICogRGF0YWJhc2UgQWJzdHJhY3Rpb24gTGF5ZXIgYnkgYWNxdWlyaW5nIGRhdGFiYXNlIG5hbWUgdGhyb3VnaCBlbnZpcm9ubWVudCB2YXJpYWJsZS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIFxuICogYnVpbGRpbmcgdGhlIHNwZWNpZmllZCBkcml2ZXIgYW5kIHF1ZXJ5YnVpbGRlciBvYmplY3RzLiBGYWN0b3J5IERlc2lnbiBQYXR0ZXJuIGlzIHVzZWQgaW4gdGhpcyBjbGFzcyBmb3IgXG4gKiBjcmVhdGluZyBkZXNpcmVkIG9iamVjdHMgcG9seW1vcnBoaWNhbGx5LiBUaGUgb2JqZWN0IG1hZGUgaXMgZGVmaW5lZCBhbHJlYWR5IGFuZCB0aHVzIHRoZSByZXF1aXJlZCBpbnN0YW5jZSBcbiAqIGlzIHJldHVybmVkLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIERiRmFjdG9yeSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBkcml2ZXIgb2YgZGF0YWJhc2UgdHlwZSBzcGVjaWZpZWQgaW4gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGFuZCByZXR1cm5zIGl0IHdoaWNoIGlzIFxuICAgICAqIG1hbmRhdG9yeSBmb3IgZXhlY3V0aW5nIHRoZSBxdWVyeSwgd2l0aG91dCB0aGlzIG9iamVjdCBpdCBpcyBub3QgcG9zc2libGUgdG8gZXhlY3V0ZSB0aGUgQ1JVRCBcbiAgICAgKiBvcGVyYXRpb25zLiBFcnJvciBoYW5kbGluZyBpcyBhbHNvIGRvbmUgaW4gdGhlIGNhc2UgaWYgdGhlIGRyaXZlciBpcyBub3QgY3JlYXRlZCBkdWUgdG8gc29tZSByZWFzb25zLFxuICAgICAqIGp1c3QgdGhyb3cgdGhlIGVycm9yIHNwZWNpZnlpbmcgdGhlIHByb2JsZW0gbWVzc2FnZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZHJpdmVyIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGxvYWREcml2ZXIoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZShgJHtwcm9jZXNzLmVudi5GSUxFUEFUSH0vY29yZS9tb2RlbHMvZGF0YWJhc2UvZHJpdmVyLyR7cHJvY2Vzcy5lbnYuREJOQU1FfS9kcml2ZXIuanNgKS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb2Nlc3MuZW52LkRCTkFNRX0gZHJpdmVyIG5vdCBjcmVhdGVkLmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcXVlcnlidWlsZGVyIG9mIGRhdGFiYXNlIHR5cGUgc3BlY2lmaWVkIGluIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBhbmQgcmV0dXJucyBpdCB3aGljaCBpcyBcbiAgICAgKiBtYW5kYXRvcnkgZm9yIGdlbmVyYXRpbmcgdGhlIHF1ZXJ5LCB3aXRob3V0IHRoaXMgb2JqZWN0IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBidWlsZCB0aGUgcXVlcnkgZm9yIHRoZSBDUlVEIFxuICAgICAqIG9wZXJhdGlvbnMuIEVycm9yIGhhbmRsaW5nIGlzIGFsc28gZG9uZSBpbiB0aGUgY2FzZSBpZiB0aGUgcXVlcnlidWlsZGVyIGlzIG5vdCBjcmVhdGVkIGR1ZSB0byBzb21lIHJlYXNvbnMsXG4gICAgICoganVzdCB0aHJvdyB0aGUgZXJyb3Igc3BlY2lmeWluZyB0aGUgcHJvYmxlbSBtZXNzYWdlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkcml2ZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgbG9hZFF1ZXJ5QnVpbGRlcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgKHJlcXVpcmUoYCR7cHJvY2Vzcy5lbnYuRklMRVBBVEh9L2NvcmUvbW9kZWxzL2RhdGFiYXNlL2RyaXZlci8ke3Byb2Nlc3MuZW52LkRCTkFNRX0vcXVlcnlCdWlsZGVyLmpzYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb2Nlc3MuZW52LkRCTkFNRX0gcXVlcnlidWlsZGVyIG5vdCBjcmVhdGVkLmApO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==