function cov_1rqbr98ndl(){var path="/home/eiman.waheed/Desktop/mvc-node/core/models/crudModel.js";var hash="6a5c15928e4c58a6ec44cd4679834622c7258466";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/models/crudModel.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:68}},"1":{start:{line:3,column:18},end:{line:3,column:45}},"2":{start:{line:11,column:0},end:{line:110,column:1}},"3":{start:{line:47,column:8},end:{line:54,column:9}},"4":{start:{line:48,column:12},end:{line:48,column:47}},"5":{start:{line:49,column:30},end:{line:49,column:72}},"6":{start:{line:50,column:12},end:{line:50,column:60}},"7":{start:{line:53,column:12},end:{line:53,column:35}},"8":{start:{line:65,column:8},end:{line:72,column:9}},"9":{start:{line:66,column:12},end:{line:66,column:47}},"10":{start:{line:67,column:30},end:{line:67,column:72}},"11":{start:{line:68,column:12},end:{line:68,column:60}},"12":{start:{line:71,column:12},end:{line:71,column:35}},"13":{start:{line:83,column:8},end:{line:90,column:9}},"14":{start:{line:84,column:12},end:{line:84,column:47}},"15":{start:{line:85,column:30},end:{line:85,column:70}},"16":{start:{line:86,column:12},end:{line:86,column:60}},"17":{start:{line:89,column:12},end:{line:89,column:35}},"18":{start:{line:101,column:8},end:{line:108,column:9}},"19":{start:{line:102,column:12},end:{line:102,column:47}},"20":{start:{line:103,column:30},end:{line:103,column:72}},"21":{start:{line:104,column:12},end:{line:104,column:60}},"22":{start:{line:107,column:12},end:{line:107,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:19},end:{line:55,column:5}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:19},end:{line:73,column:5}},line:64},"2":{name:"(anonymous_2)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:17},end:{line:91,column:5}},line:82},"3":{name:"(anonymous_3)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:19},end:{line:109,column:5}},line:100}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6a5c15928e4c58a6ec44cd4679834622c7258466"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rqbr98ndl=function(){return actualCoverage;};}return actualCoverage;}cov_1rqbr98ndl();/** Acquiring autoloader. */const autoload=(cov_1rqbr98ndl().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const dbFactory=(cov_1rqbr98ndl().s[1]++,new(autoload('dbFactory'))());/** Class representing CRUD operations which will be responsible for creating,
 * updating, deleting and listing records. These CRUD operations are perfomed
 * for the specific model and thus querybuilder is responsible for generating
 * the query and returning its results back. This class also handles the use of
 * driver instance which will run the query.
 */cov_1rqbr98ndl().s[2]++;module.exports=class CRUDModel{/**
     * Returns the driver object of the specified database. 
     * @return {object} Driver object.
     */ /* istanbul ignore next */getDriver(){return dbFactory.loadDriver();}/**
     * Returns the querybuilder object of the specified database. 
     * @return {object} QueryBuilder object.
     */ /* istanbul ignore next */getQueryBuilder(){return dbFactory.loadQueryBuilder();}/**
     * Returns the entity object. 
     * @return {object} Entity object.
     */ /* istanbul ignore next */getEntity(){return this.entity;}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the insert query and 
     * execute it respectively.
     * @param {object} params 
     */create(params){cov_1rqbr98ndl().f[0]++;cov_1rqbr98ndl().s[3]++;try{cov_1rqbr98ndl().s[4]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[5]++,this.getQueryBuilder().create(this.entity));cov_1rqbr98ndl().s[6]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[7]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the update query and 
     * execute it respectively.
     * @param {object} params 
     */update(params){cov_1rqbr98ndl().f[1]++;cov_1rqbr98ndl().s[8]++;try{cov_1rqbr98ndl().s[9]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[10]++,this.getQueryBuilder().update(this.entity));cov_1rqbr98ndl().s[11]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[12]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the select query and 
     * execute it respectively.
     * @param {object} params 
     */list(params){cov_1rqbr98ndl().f[2]++;cov_1rqbr98ndl().s[13]++;try{cov_1rqbr98ndl().s[14]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[15]++,this.getQueryBuilder().list(this.entity));cov_1rqbr98ndl().s[16]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[17]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the delete query and 
     * execute it respectively.
     * @param {object} params 
     */delete(params){cov_1rqbr98ndl().f[3]++;cov_1rqbr98ndl().s[18]++;try{cov_1rqbr98ndl().s[19]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[20]++,this.getQueryBuilder().delete(this.entity));cov_1rqbr98ndl().s[21]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[22]++;throw new Error(error);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNydWRNb2RlbC5qcyJdLCJuYW1lcyI6WyJhdXRvbG9hZCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiRklMRVBBVEgiLCJkYkZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ1JVRE1vZGVsIiwiZ2V0RHJpdmVyIiwibG9hZERyaXZlciIsImdldFF1ZXJ5QnVpbGRlciIsImxvYWRRdWVyeUJ1aWxkZXIiLCJnZXRFbnRpdHkiLCJlbnRpdHkiLCJjcmVhdGUiLCJwYXJhbXMiLCJzZXRFbnRpdHkiLCJxdWVyeVN0cmluZyIsInJ1blF1ZXJ5IiwiZXJyb3IiLCJFcnJvciIsInVwZGF0ZSIsImxpc3QiLCJkZWxldGUiXSwibWFwcGluZ3MiOiI4bUZBZVk7MkZBZlosNEJBQ0EsS0FBTUEsQ0FBQUEsUUFBUSwwQkFBR0MsT0FBTyxDQUFFLEdBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLG1CQUF6QixDQUFWLENBQWQsQ0FDQSxLQUFNQyxDQUFBQSxTQUFTLDBCQUFHLElBQUtMLFFBQVEsQ0FBQyxXQUFELENBQWIsR0FBSCxDQUFmLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBQ0FNLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixLQUFNQyxDQUFBQSxTQUFVLENBRTdCO0FBQ0o7QUFDQTtBQUNBLE9BTGlDLENBTTdCLDBCQUNBQyxTQUFTLEVBQUcsQ0FDUixNQUFPSixDQUFBQSxTQUFTLENBQUNLLFVBQVYsRUFBUCxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsT0FkaUMsQ0FlN0IsMEJBQ0FDLGVBQWUsRUFBRyxDQUNkLE1BQU9OLENBQUFBLFNBQVMsQ0FBQ08sZ0JBQVYsRUFBUCxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsT0F2QmlDLENBd0I3QiwwQkFDQUMsU0FBUyxFQUFHLENBQ1IsTUFBTyxNQUFLQyxNQUFaLENBQ0gsQ0FDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJQyxNQUFNLENBQUNDLE1BQUQsQ0FBUyxpREFDWCxHQUFJLHlCQUNBLEtBQUtILFNBQUwsR0FBaUJJLFNBQWpCLENBQTJCRCxNQUEzQixFQUNBLEdBQUlFLENBQUFBLFdBQVcsMEJBQUcsS0FBS1AsZUFBTCxHQUF1QkksTUFBdkIsQ0FBOEIsS0FBS0QsTUFBbkMsQ0FBSCxDQUFmLENBRkEsd0JBR0EsTUFBUSxNQUFLTCxTQUFMLEdBQWlCVSxRQUFqQixDQUEwQkQsV0FBMUIsQ0FBUixDQUNILENBQ0QsTUFBT0UsS0FBUCxDQUFjLHlCQUNWLEtBQU0sSUFBSUMsQ0FBQUEsS0FBSixDQUFVRCxLQUFWLENBQU4sQ0FDSCxDQUNKLENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FDSUUsTUFBTSxDQUFDTixNQUFELENBQVMsaURBQ1gsR0FBSSx5QkFDQSxLQUFLSCxTQUFMLEdBQWlCSSxTQUFqQixDQUEyQkQsTUFBM0IsRUFDQSxHQUFJRSxDQUFBQSxXQUFXLDJCQUFHLEtBQUtQLGVBQUwsR0FBdUJXLE1BQXZCLENBQThCLEtBQUtSLE1BQW5DLENBQUgsQ0FBZixDQUZBLHlCQUdBLE1BQVEsTUFBS0wsU0FBTCxHQUFpQlUsUUFBakIsQ0FBMEJELFdBQTFCLENBQVIsQ0FDSCxDQUNELE1BQU9FLEtBQVAsQ0FBYywwQkFDVixLQUFNLElBQUlDLENBQUFBLEtBQUosQ0FBVUQsS0FBVixDQUFOLENBQ0gsQ0FDSixDQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lHLElBQUksQ0FBQ1AsTUFBRCxDQUFTLGtEQUNULEdBQUksMEJBQ0EsS0FBS0gsU0FBTCxHQUFpQkksU0FBakIsQ0FBMkJELE1BQTNCLEVBQ0EsR0FBSUUsQ0FBQUEsV0FBVywyQkFBRyxLQUFLUCxlQUFMLEdBQXVCWSxJQUF2QixDQUE0QixLQUFLVCxNQUFqQyxDQUFILENBQWYsQ0FGQSx5QkFHQSxNQUFRLE1BQUtMLFNBQUwsR0FBaUJVLFFBQWpCLENBQTBCRCxXQUExQixDQUFSLENBQ0gsQ0FDRCxNQUFPRSxLQUFQLENBQWMsMEJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVVELEtBQVYsQ0FBTixDQUNILENBQ0osQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJSSxNQUFNLENBQUNSLE1BQUQsQ0FBUyxrREFDWCxHQUFJLDBCQUNBLEtBQUtILFNBQUwsR0FBaUJJLFNBQWpCLENBQTJCRCxNQUEzQixFQUNBLEdBQUlFLENBQUFBLFdBQVcsMkJBQUcsS0FBS1AsZUFBTCxHQUF1QmEsTUFBdkIsQ0FBOEIsS0FBS1YsTUFBbkMsQ0FBSCxDQUFmLENBRkEseUJBR0EsTUFBUSxNQUFLTCxTQUFMLEdBQWlCVSxRQUFqQixDQUEwQkQsV0FBMUIsQ0FBUixDQUNILENBQ0QsTUFBT0UsS0FBUCxDQUFjLDBCQUNWLEtBQU0sSUFBSUMsQ0FBQUEsS0FBSixDQUFVRCxLQUFWLENBQU4sQ0FDSCxDQUNKLENBbEc0QixDQUFqQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBBY3F1aXJpbmcgYXV0b2xvYWRlci4gKi9cbmNvbnN0IGF1dG9sb2FkID0gcmVxdWlyZShgJHtwcm9jZXNzLmVudi5GSUxFUEFUSH0vY29yZS9hdXRvbG9hZC5qc2ApO1xuY29uc3QgZGJGYWN0b3J5ID0gbmV3IChhdXRvbG9hZCgnZGJGYWN0b3J5JykpO1xuXG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIENSVUQgb3BlcmF0aW9ucyB3aGljaCB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyxcbiAqIHVwZGF0aW5nLCBkZWxldGluZyBhbmQgbGlzdGluZyByZWNvcmRzLiBUaGVzZSBDUlVEIG9wZXJhdGlvbnMgYXJlIHBlcmZvbWVkXG4gKiBmb3IgdGhlIHNwZWNpZmljIG1vZGVsIGFuZCB0aHVzIHF1ZXJ5YnVpbGRlciBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZ1xuICogdGhlIHF1ZXJ5IGFuZCByZXR1cm5pbmcgaXRzIHJlc3VsdHMgYmFjay4gVGhpcyBjbGFzcyBhbHNvIGhhbmRsZXMgdGhlIHVzZSBvZlxuICogZHJpdmVyIGluc3RhbmNlIHdoaWNoIHdpbGwgcnVuIHRoZSBxdWVyeS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDUlVETW9kZWwge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZHJpdmVyIG9iamVjdCBvZiB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLiBcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IERyaXZlciBvYmplY3QuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBnZXREcml2ZXIoKSB7XG4gICAgICAgIHJldHVybiBkYkZhY3RvcnkubG9hZERyaXZlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHF1ZXJ5YnVpbGRlciBvYmplY3Qgb2YgdGhlIHNwZWNpZmllZCBkYXRhYmFzZS4gXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBRdWVyeUJ1aWxkZXIgb2JqZWN0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgZ2V0UXVlcnlCdWlsZGVyKCkge1xuICAgICAgICByZXR1cm4gZGJGYWN0b3J5LmxvYWRRdWVyeUJ1aWxkZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBlbnRpdHkgb2JqZWN0LiBcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IEVudGl0eSBvYmplY3QuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBnZXRFbnRpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudGl0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgdGhlIG1ldGFkYXRhIG9mIHJlc3BlY3RpdmUgbW9kZWwgYXMgaXQgdGFrZXMgcGFyYW1zIGFzIGEgXG4gICAgICogcGFyYW1ldGVyLCBnZXRzIHRoZSBxdWVyeWJ1aWxkZXIgYW5kIGRyaXZlciBpbnN0YW5jZSBieSBpbnZva2luZyBnZXR0ZXJcbiAgICAgKiBhbmQgc2V0dGVyIGZvciBlYWNoIG9mIHRoZW0gd2hpY2ggd2lsbCBnZW5lcmF0ZSB0aGUgaW5zZXJ0IHF1ZXJ5IGFuZCBcbiAgICAgKiBleGVjdXRlIGl0IHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFxuICAgICAqL1xuICAgIGNyZWF0ZShwYXJhbXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RW50aXR5KCkuc2V0RW50aXR5KHBhcmFtcyk7XG4gICAgICAgICAgICBsZXQgcXVlcnlTdHJpbmcgPSB0aGlzLmdldFF1ZXJ5QnVpbGRlcigpLmNyZWF0ZSh0aGlzLmVudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZ2V0RHJpdmVyKCkucnVuUXVlcnkocXVlcnlTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyB0aGUgbWV0YWRhdGEgb2YgcmVzcGVjdGl2ZSBtb2RlbCBhcyBpdCB0YWtlcyBwYXJhbXMgYXMgYSBcbiAgICAgKiBwYXJhbWV0ZXIsIGdldHMgdGhlIHF1ZXJ5YnVpbGRlciBhbmQgZHJpdmVyIGluc3RhbmNlIGJ5IGludm9raW5nIGdldHRlclxuICAgICAqIGFuZCBzZXR0ZXIgZm9yIGVhY2ggb2YgdGhlbSB3aGljaCB3aWxsIGdlbmVyYXRlIHRoZSB1cGRhdGUgcXVlcnkgYW5kIFxuICAgICAqIGV4ZWN1dGUgaXQgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgXG4gICAgICovXG4gICAgdXBkYXRlKHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5nZXRFbnRpdHkoKS5zZXRFbnRpdHkocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlCdWlsZGVyKCkudXBkYXRlKHRoaXMuZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXREcml2ZXIoKS5ydW5RdWVyeShxdWVyeVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIHRoZSBtZXRhZGF0YSBvZiByZXNwZWN0aXZlIG1vZGVsIGFzIGl0IHRha2VzIHBhcmFtcyBhcyBhIFxuICAgICAqIHBhcmFtZXRlciwgZ2V0cyB0aGUgcXVlcnlidWlsZGVyIGFuZCBkcml2ZXIgaW5zdGFuY2UgYnkgaW52b2tpbmcgZ2V0dGVyXG4gICAgICogYW5kIHNldHRlciBmb3IgZWFjaCBvZiB0aGVtIHdoaWNoIHdpbGwgZ2VuZXJhdGUgdGhlIHNlbGVjdCBxdWVyeSBhbmQgXG4gICAgICogZXhlY3V0ZSBpdCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBcbiAgICAgKi9cbiAgICBsaXN0KHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5nZXRFbnRpdHkoKS5zZXRFbnRpdHkocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlCdWlsZGVyKCkubGlzdCh0aGlzLmVudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZ2V0RHJpdmVyKCkucnVuUXVlcnkocXVlcnlTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyB0aGUgbWV0YWRhdGEgb2YgcmVzcGVjdGl2ZSBtb2RlbCBhcyBpdCB0YWtlcyBwYXJhbXMgYXMgYSBcbiAgICAgKiBwYXJhbWV0ZXIsIGdldHMgdGhlIHF1ZXJ5YnVpbGRlciBhbmQgZHJpdmVyIGluc3RhbmNlIGJ5IGludm9raW5nIGdldHRlclxuICAgICAqIGFuZCBzZXR0ZXIgZm9yIGVhY2ggb2YgdGhlbSB3aGljaCB3aWxsIGdlbmVyYXRlIHRoZSBkZWxldGUgcXVlcnkgYW5kIFxuICAgICAqIGV4ZWN1dGUgaXQgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgXG4gICAgICovXG4gICAgZGVsZXRlKHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5nZXRFbnRpdHkoKS5zZXRFbnRpdHkocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlCdWlsZGVyKCkuZGVsZXRlKHRoaXMuZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXREcml2ZXIoKS5ydW5RdWVyeShxdWVyeVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=