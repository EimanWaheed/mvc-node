function cov_1z15nnfwmd(){var path="/var/www/html/mvc-node/core/views/viewManager.js";var hash="ab58a955dd4fca87c0d43f7f284cf39370c36434";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/mvc-node/core/views/viewManager.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:82}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:19,column:8},end:{line:31,column:9}},"3":{start:{line:20,column:23},end:{line:20,column:36}},"4":{start:{line:21,column:29},end:{line:21,column:67}},"5":{start:{line:22,column:29},end:{line:22,column:127}},"6":{start:{line:23,column:31},end:{line:23,column:74}},"7":{start:{line:24,column:12},end:{line:24,column:40}},"8":{start:{line:25,column:12},end:{line:25,column:49}},"9":{start:{line:26,column:12},end:{line:26,column:44}},"10":{start:{line:27,column:12},end:{line:27,column:28}},"11":{start:{line:30,column:12},end:{line:30,column:62}},"12":{start:{line:39,column:8},end:{line:39,column:42}},"13":{start:{line:40,column:8},end:{line:40,column:39}},"14":{start:{line:43,column:0},end:{line:43,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:33,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:20},end:{line:41,column:5}},line:38}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ab58a955dd4fca87c0d43f7f284cf39370c36434"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1z15nnfwmd=function(){return actualCoverage;};}return actualCoverage;}cov_1z15nnfwmd();const autoload=(cov_1z15nnfwmd().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`).getInstance());const mustache=(cov_1z15nnfwmd().s[1]++,require('mustache'));/** Class representing View Manager which is responsible for loading view and setting the key for rendering the data.
 * It loads all the views that are present, renders them and displays them on the screen. For the purpose of setting 
 * the data from database dynamically, it makes use of the Mustache.js and renders the data and make it available.
 */class ViewManager{/**
     * Loads the views specified in the controllerName and actionName for student, course,
     * teacher and default. For the purpose of setting the response object, it reads the 
     * html files and sets the data dynamically to be displayed on screen using Mustache.render
     * and returns the response object. 
     * @param {string} controllerName 
     * @param {string} actionName 
     * @returns {Object} response
     */loadView(controllerName,actionName){cov_1z15nnfwmd().f[0]++;cov_1z15nnfwmd().s[2]++;try{const fs=(cov_1z15nnfwmd().s[3]++,require('fs'));const response=(cov_1z15nnfwmd().s[4]++,new(autoload.getFileName('response'))());const htmlData=(cov_1z15nnfwmd().s[5]++,fs.readFileSync(`${process.env.FILEPATH}/app/views/${controllerName}/${actionName}.html`,'utf-8'));const viewString=(cov_1z15nnfwmd().s[6]++,mustache.render(htmlData,this.templateKey));cov_1z15nnfwmd().s[7]++;response.setStatusCode(200);cov_1z15nnfwmd().s[8]++;response.setContentType('text/html');cov_1z15nnfwmd().s[9]++;response.setContent(viewString);cov_1z15nnfwmd().s[10]++;return response;}catch(error){cov_1z15nnfwmd().s[11]++;throw new Error(`${actionName} view not loaded.`);}}/**
     * Sets the database fetched data in the class property.
     * @param {string} data 
     */setData(result){cov_1z15nnfwmd().f[1]++;cov_1z15nnfwmd().s[12]++;this.templateKey={'data':[]};cov_1z15nnfwmd().s[13]++;this.templateKey.data=result;}}cov_1z15nnfwmd().s[14]++;module.exports=ViewManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImF1dG9sb2FkIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJGSUxFUEFUSCIsImdldEluc3RhbmNlIiwibXVzdGFjaGUiLCJWaWV3TWFuYWdlciIsImxvYWRWaWV3IiwiY29udHJvbGxlck5hbWUiLCJhY3Rpb25OYW1lIiwiZnMiLCJyZXNwb25zZSIsImdldEZpbGVOYW1lIiwiaHRtbERhdGEiLCJyZWFkRmlsZVN5bmMiLCJ2aWV3U3RyaW5nIiwicmVuZGVyIiwidGVtcGxhdGVLZXkiLCJzZXRTdGF0dXNDb2RlIiwic2V0Q29udGVudFR5cGUiLCJzZXRDb250ZW50IiwiZXJyb3IiLCJFcnJvciIsInNldERhdGEiLCJyZXN1bHQiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijh4REFlWTsyRkFmWixLQUFNQSxDQUFBQSxRQUFRLDBCQUFHQyxPQUFPLENBQUUsR0FBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVMsbUJBQXpCLENBQVAsQ0FBb0RDLFdBQXBELEVBQUgsQ0FBZCxDQUNBLEtBQU1DLENBQUFBLFFBQVEsMEJBQUdMLE9BQU8sQ0FBQyxVQUFELENBQVYsQ0FBZCxDQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsS0FBTU0sQ0FBQUEsV0FBWSxDQUVkO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJQyxRQUFRLENBQUNDLGNBQUQsQ0FBaUJDLFVBQWpCLENBQTZCLGlEQUNqQyxHQUFJLENBQ0EsS0FBTUMsQ0FBQUEsRUFBRSwwQkFBR1YsT0FBTyxDQUFDLElBQUQsQ0FBVixDQUFSLENBQ0EsS0FBTVcsQ0FBQUEsUUFBUSwwQkFBRyxJQUFLWixRQUFRLENBQUNhLFdBQVQsQ0FBcUIsVUFBckIsQ0FBTCxHQUFILENBQWQsQ0FDQSxLQUFNQyxDQUFBQSxRQUFRLDBCQUFHSCxFQUFFLENBQUNJLFlBQUgsQ0FBaUIsR0FBRWIsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVMsY0FBYUssY0FBZSxJQUFHQyxVQUFXLE9BQWxGLENBQTBGLE9BQTFGLENBQUgsQ0FBZCxDQUNBLEtBQU1NLENBQUFBLFVBQVUsMEJBQUdWLFFBQVEsQ0FBQ1csTUFBVCxDQUFnQkgsUUFBaEIsQ0FBMEIsS0FBS0ksV0FBL0IsQ0FBSCxDQUFoQixDQUpBLHdCQUtBTixRQUFRLENBQUNPLGFBQVQsQ0FBdUIsR0FBdkIsRUFMQSx3QkFNQVAsUUFBUSxDQUFDUSxjQUFULENBQXdCLFdBQXhCLEVBTkEsd0JBT0FSLFFBQVEsQ0FBQ1MsVUFBVCxDQUFvQkwsVUFBcEIsRUFQQSx5QkFRQSxNQUFPSixDQUFBQSxRQUFQLENBQ0gsQ0FDRCxNQUFPVSxLQUFQLENBQWMsMEJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVcsR0FBRWIsVUFBVyxtQkFBeEIsQ0FBTixDQUNILENBRUosQ0FDRDtBQUNKO0FBQ0E7QUFDQSxPQUNJYyxPQUFPLENBQUNDLE1BQUQsQ0FBUyxrREFDWixLQUFLUCxXQUFMLENBQW1CLENBQUUsT0FBUSxFQUFWLENBQW5CLENBRFkseUJBRVosS0FBS0EsV0FBTCxDQUFpQlEsSUFBakIsQ0FBd0JELE1BQXhCLENBQ0gsQ0FsQ2EsQyx5QkFvQ2xCRSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJyQixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF1dG9sb2FkID0gcmVxdWlyZShgJHtwcm9jZXNzLmVudi5GSUxFUEFUSH0vY29yZS9hdXRvbG9hZC5qc2ApLmdldEluc3RhbmNlKCk7XG5jb25zdCBtdXN0YWNoZSA9IHJlcXVpcmUoJ211c3RhY2hlJyk7XG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIFZpZXcgTWFuYWdlciB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgbG9hZGluZyB2aWV3IGFuZCBzZXR0aW5nIHRoZSBrZXkgZm9yIHJlbmRlcmluZyB0aGUgZGF0YS5cbiAqIEl0IGxvYWRzIGFsbCB0aGUgdmlld3MgdGhhdCBhcmUgcHJlc2VudCwgcmVuZGVycyB0aGVtIGFuZCBkaXNwbGF5cyB0aGVtIG9uIHRoZSBzY3JlZW4uIEZvciB0aGUgcHVycG9zZSBvZiBzZXR0aW5nIFxuICogdGhlIGRhdGEgZnJvbSBkYXRhYmFzZSBkeW5hbWljYWxseSwgaXQgbWFrZXMgdXNlIG9mIHRoZSBNdXN0YWNoZS5qcyBhbmQgcmVuZGVycyB0aGUgZGF0YSBhbmQgbWFrZSBpdCBhdmFpbGFibGUuXG4gKi9cbmNsYXNzIFZpZXdNYW5hZ2VyIHtcblxuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSB2aWV3cyBzcGVjaWZpZWQgaW4gdGhlIGNvbnRyb2xsZXJOYW1lIGFuZCBhY3Rpb25OYW1lIGZvciBzdHVkZW50LCBjb3Vyc2UsXG4gICAgICogdGVhY2hlciBhbmQgZGVmYXVsdC4gRm9yIHRoZSBwdXJwb3NlIG9mIHNldHRpbmcgdGhlIHJlc3BvbnNlIG9iamVjdCwgaXQgcmVhZHMgdGhlIFxuICAgICAqIGh0bWwgZmlsZXMgYW5kIHNldHMgdGhlIGRhdGEgZHluYW1pY2FsbHkgdG8gYmUgZGlzcGxheWVkIG9uIHNjcmVlbiB1c2luZyBNdXN0YWNoZS5yZW5kZXJcbiAgICAgKiBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2Ugb2JqZWN0LiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udHJvbGxlck5hbWUgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbk5hbWUgXG4gICAgICogQHJldHVybnMge09iamVjdH0gcmVzcG9uc2VcbiAgICAgKi9cbiAgICBsb2FkVmlldyhjb250cm9sbGVyTmFtZSwgYWN0aW9uTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgKGF1dG9sb2FkLmdldEZpbGVOYW1lKCdyZXNwb25zZScpKTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWxEYXRhID0gZnMucmVhZEZpbGVTeW5jKGAke3Byb2Nlc3MuZW52LkZJTEVQQVRIfS9hcHAvdmlld3MvJHtjb250cm9sbGVyTmFtZX0vJHthY3Rpb25OYW1lfS5odG1sYCwgJ3V0Zi04Jyk7XG4gICAgICAgICAgICBjb25zdCB2aWV3U3RyaW5nID0gbXVzdGFjaGUucmVuZGVyKGh0bWxEYXRhLCB0aGlzLnRlbXBsYXRlS2V5KTtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldFN0YXR1c0NvZGUoMjAwKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldENvbnRlbnRUeXBlKCd0ZXh0L2h0bWwnKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldENvbnRlbnQodmlld1N0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YWN0aW9uTmFtZX0gdmlldyBub3QgbG9hZGVkLmApO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YWJhc2UgZmV0Y2hlZCBkYXRhIGluIHRoZSBjbGFzcyBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBcbiAgICAgKi9cbiAgICBzZXREYXRhKHJlc3VsdCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlS2V5ID0geyAnZGF0YSc6IFtdIH07XG4gICAgICAgIHRoaXMudGVtcGxhdGVLZXkuZGF0YSA9IHJlc3VsdDtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdNYW5hZ2VyOyJdfQ==