function cov_1z15nnfwmd(){var path="/var/www/html/mvc-node/core/views/viewManager.js";var hash="65f8b6869d291f2e829cbdcc7dd140a9cbbaeef0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/mvc-node/core/views/viewManager.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:68}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:19,column:8},end:{line:31,column:9}},"3":{start:{line:20,column:23},end:{line:20,column:36}},"4":{start:{line:21,column:29},end:{line:21,column:55}},"5":{start:{line:22,column:29},end:{line:22,column:127}},"6":{start:{line:23,column:31},end:{line:23,column:74}},"7":{start:{line:24,column:12},end:{line:24,column:40}},"8":{start:{line:25,column:12},end:{line:25,column:49}},"9":{start:{line:26,column:12},end:{line:26,column:44}},"10":{start:{line:27,column:12},end:{line:27,column:28}},"11":{start:{line:30,column:12},end:{line:30,column:62}},"12":{start:{line:39,column:8},end:{line:39,column:42}},"13":{start:{line:40,column:8},end:{line:40,column:39}},"14":{start:{line:43,column:0},end:{line:43,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:33,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:20},end:{line:41,column:5}},line:38}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"65f8b6869d291f2e829cbdcc7dd140a9cbbaeef0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1z15nnfwmd=function(){return actualCoverage;};}return actualCoverage;}cov_1z15nnfwmd();const autoload=(cov_1z15nnfwmd().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const mustache=(cov_1z15nnfwmd().s[1]++,require('mustache'));/** Class representing View Manager which is responsible for loading view and setting the key for rendering the data.
 * It loads all the views that are present, renders them and displays them on the screen. For the purpose of setting 
 * the data from database dynamically, it makes use of the Mustache.js and renders the data and make it available.
 */class ViewManager{/**
     * Loads the views specified in the controllerName and actionName for student, course,
     * teacher and default. For the purpose of setting the response object, it reads the 
     * html files and sets the data dynamically to be displayed on screen using Mustache.render
     * and returns the response object. 
     * @param {string} controllerName 
     * @param {string} actionName 
     * @returns {Object} response
     */loadView(controllerName,actionName){cov_1z15nnfwmd().f[0]++;cov_1z15nnfwmd().s[2]++;try{const fs=(cov_1z15nnfwmd().s[3]++,require('fs'));const response=(cov_1z15nnfwmd().s[4]++,new(autoload('response'))());const htmlData=(cov_1z15nnfwmd().s[5]++,fs.readFileSync(`${process.env.FILEPATH}/app/views/${controllerName}/${actionName}.html`,'utf-8'));const viewString=(cov_1z15nnfwmd().s[6]++,mustache.render(htmlData,this.templateKey));cov_1z15nnfwmd().s[7]++;response.setStatusCode(200);cov_1z15nnfwmd().s[8]++;response.setContentType('text/html');cov_1z15nnfwmd().s[9]++;response.setContent(viewString);cov_1z15nnfwmd().s[10]++;return response;}catch(error){cov_1z15nnfwmd().s[11]++;throw new Error(`${actionName} view not loaded.`);}}/**
     * Sets the database fetched data in the class property.
     * @param {string} data 
     */setData(result){cov_1z15nnfwmd().f[1]++;cov_1z15nnfwmd().s[12]++;this.templateKey={'data':[]};cov_1z15nnfwmd().s[13]++;this.templateKey.data=result;}}cov_1z15nnfwmd().s[14]++;module.exports=ViewManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImF1dG9sb2FkIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJGSUxFUEFUSCIsIm11c3RhY2hlIiwiVmlld01hbmFnZXIiLCJsb2FkVmlldyIsImNvbnRyb2xsZXJOYW1lIiwiYWN0aW9uTmFtZSIsImZzIiwicmVzcG9uc2UiLCJodG1sRGF0YSIsInJlYWRGaWxlU3luYyIsInZpZXdTdHJpbmciLCJyZW5kZXIiLCJ0ZW1wbGF0ZUtleSIsInNldFN0YXR1c0NvZGUiLCJzZXRDb250ZW50VHlwZSIsInNldENvbnRlbnQiLCJlcnJvciIsIkVycm9yIiwic2V0RGF0YSIsInJlc3VsdCIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOHhEQWVZOzJGQWZaLEtBQU1BLENBQUFBLFFBQVEsMEJBQUdDLE9BQU8sQ0FBRSxHQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBUyxtQkFBekIsQ0FBVixDQUFkLENBQ0EsS0FBTUMsQ0FBQUEsUUFBUSwwQkFBR0osT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFkLENBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNSyxDQUFBQSxXQUFZLENBRWQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLFFBQVEsQ0FBQ0MsY0FBRCxDQUFpQkMsVUFBakIsQ0FBNkIsaURBQ2pDLEdBQUksQ0FDQSxLQUFNQyxDQUFBQSxFQUFFLDBCQUFHVCxPQUFPLENBQUMsSUFBRCxDQUFWLENBQVIsQ0FDQSxLQUFNVSxDQUFBQSxRQUFRLDBCQUFHLElBQUtYLFFBQVEsQ0FBQyxVQUFELENBQWIsR0FBSCxDQUFkLENBQ0EsS0FBTVksQ0FBQUEsUUFBUSwwQkFBR0YsRUFBRSxDQUFDRyxZQUFILENBQWlCLEdBQUVYLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLGNBQWFJLGNBQWUsSUFBR0MsVUFBVyxPQUFsRixDQUEwRixPQUExRixDQUFILENBQWQsQ0FDQSxLQUFNSyxDQUFBQSxVQUFVLDBCQUFHVCxRQUFRLENBQUNVLE1BQVQsQ0FBZ0JILFFBQWhCLENBQTBCLEtBQUtJLFdBQS9CLENBQUgsQ0FBaEIsQ0FKQSx3QkFLQUwsUUFBUSxDQUFDTSxhQUFULENBQXVCLEdBQXZCLEVBTEEsd0JBTUFOLFFBQVEsQ0FBQ08sY0FBVCxDQUF3QixXQUF4QixFQU5BLHdCQU9BUCxRQUFRLENBQUNRLFVBQVQsQ0FBb0JMLFVBQXBCLEVBUEEseUJBUUEsTUFBT0gsQ0FBQUEsUUFBUCxDQUNILENBQ0QsTUFBT1MsS0FBUCxDQUFjLDBCQUNWLEtBQU0sSUFBSUMsQ0FBQUEsS0FBSixDQUFXLEdBQUVaLFVBQVcsbUJBQXhCLENBQU4sQ0FDSCxDQUVKLENBQ0Q7QUFDSjtBQUNBO0FBQ0EsT0FDSWEsT0FBTyxDQUFDQyxNQUFELENBQVMsa0RBQ1osS0FBS1AsV0FBTCxDQUFtQixDQUFFLE9BQVEsRUFBVixDQUFuQixDQURZLHlCQUVaLEtBQUtBLFdBQUwsQ0FBaUJRLElBQWpCLENBQXdCRCxNQUF4QixDQUNILENBbENhLEMseUJBb0NsQkUsTUFBTSxDQUFDQyxPQUFQLENBQWlCcEIsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhdXRvbG9hZCA9IHJlcXVpcmUoYCR7cHJvY2Vzcy5lbnYuRklMRVBBVEh9L2NvcmUvYXV0b2xvYWQuanNgKTtcbmNvbnN0IG11c3RhY2hlID0gcmVxdWlyZSgnbXVzdGFjaGUnKTtcbi8qKiBDbGFzcyByZXByZXNlbnRpbmcgVmlldyBNYW5hZ2VyIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nIHZpZXcgYW5kIHNldHRpbmcgdGhlIGtleSBmb3IgcmVuZGVyaW5nIHRoZSBkYXRhLlxuICogSXQgbG9hZHMgYWxsIHRoZSB2aWV3cyB0aGF0IGFyZSBwcmVzZW50LCByZW5kZXJzIHRoZW0gYW5kIGRpc3BsYXlzIHRoZW0gb24gdGhlIHNjcmVlbi4gRm9yIHRoZSBwdXJwb3NlIG9mIHNldHRpbmcgXG4gKiB0aGUgZGF0YSBmcm9tIGRhdGFiYXNlIGR5bmFtaWNhbGx5LCBpdCBtYWtlcyB1c2Ugb2YgdGhlIE11c3RhY2hlLmpzIGFuZCByZW5kZXJzIHRoZSBkYXRhIGFuZCBtYWtlIGl0IGF2YWlsYWJsZS5cbiAqL1xuY2xhc3MgVmlld01hbmFnZXIge1xuXG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIHZpZXdzIHNwZWNpZmllZCBpbiB0aGUgY29udHJvbGxlck5hbWUgYW5kIGFjdGlvbk5hbWUgZm9yIHN0dWRlbnQsIGNvdXJzZSxcbiAgICAgKiB0ZWFjaGVyIGFuZCBkZWZhdWx0LiBGb3IgdGhlIHB1cnBvc2Ugb2Ygc2V0dGluZyB0aGUgcmVzcG9uc2Ugb2JqZWN0LCBpdCByZWFkcyB0aGUgXG4gICAgICogaHRtbCBmaWxlcyBhbmQgc2V0cyB0aGUgZGF0YSBkeW5hbWljYWxseSB0byBiZSBkaXNwbGF5ZWQgb24gc2NyZWVuIHVzaW5nIE11c3RhY2hlLnJlbmRlclxuICAgICAqIGFuZCByZXR1cm5zIHRoZSByZXNwb25zZSBvYmplY3QuIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sbGVyTmFtZSBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uTmFtZSBcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSByZXNwb25zZVxuICAgICAqL1xuICAgIGxvYWRWaWV3KGNvbnRyb2xsZXJOYW1lLCBhY3Rpb25OYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IG5ldyAoYXV0b2xvYWQoJ3Jlc3BvbnNlJykpO1xuICAgICAgICAgICAgY29uc3QgaHRtbERhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYCR7cHJvY2Vzcy5lbnYuRklMRVBBVEh9L2FwcC92aWV3cy8ke2NvbnRyb2xsZXJOYW1lfS8ke2FjdGlvbk5hbWV9Lmh0bWxgLCAndXRmLTgnKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdTdHJpbmcgPSBtdXN0YWNoZS5yZW5kZXIoaHRtbERhdGEsIHRoaXMudGVtcGxhdGVLZXkpO1xuICAgICAgICAgICAgcmVzcG9uc2Uuc2V0U3RhdHVzQ29kZSgyMDApO1xuICAgICAgICAgICAgcmVzcG9uc2Uuc2V0Q29udGVudFR5cGUoJ3RleHQvaHRtbCcpO1xuICAgICAgICAgICAgcmVzcG9uc2Uuc2V0Q29udGVudCh2aWV3U3RyaW5nKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHthY3Rpb25OYW1lfSB2aWV3IG5vdCBsb2FkZWQuYCk7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkYXRhYmFzZSBmZXRjaGVkIGRhdGEgaW4gdGhlIGNsYXNzIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIFxuICAgICAqL1xuICAgIHNldERhdGEocmVzdWx0KSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVLZXkgPSB7ICdkYXRhJzogW10gfTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUtleS5kYXRhID0gcmVzdWx0O1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gVmlld01hbmFnZXI7Il19