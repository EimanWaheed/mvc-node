function cov_1hm86qp3s0(){var path="/home/eiman.waheed/Desktop/mvc-node/core/request.js";var hash="44f36e11dad95a7e3bd5dc3699b0b14a93330970";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/request.js",statementMap:{"0":{start:{line:2,column:12},end:{line:2,column:26}},"1":{start:{line:3,column:20},end:{line:3,column:42}},"2":{start:{line:12,column:0},end:{line:72,column:1}},"3":{start:{line:19,column:8},end:{line:21,column:9}},"4":{start:{line:20,column:12},end:{line:20,column:45}},"5":{start:{line:22,column:8},end:{line:22,column:32}},"6":{start:{line:30,column:8},end:{line:30,column:35}},"7":{start:{line:38,column:8},end:{line:38,column:31}},"8":{start:{line:46,column:8},end:{line:46,column:27}},"9":{start:{line:58,column:19},end:{line:58,column:21}},"10":{start:{line:59,column:8},end:{line:61,column:11}},"11":{start:{line:60,column:12},end:{line:60,column:29}},"12":{start:{line:62,column:8},end:{line:70,column:11}},"13":{start:{line:63,column:12},end:{line:63,column:50}},"14":{start:{line:64,column:31},end:{line:64,column:54}},"15":{start:{line:65,column:30},end:{line:65,column:60}},"16":{start:{line:66,column:12},end:{line:66,column:57}},"17":{start:{line:67,column:12},end:{line:67,column:49}},"18":{start:{line:68,column:12},end:{line:68,column:37}},"19":{start:{line:69,column:12},end:{line:69,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:25},end:{line:23,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:20},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:16},end:{line:39,column:5}},line:37},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:16},end:{line:47,column:5}},line:45},"4":{name:"(anonymous_4)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:37},end:{line:71,column:5}},line:56},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:23},end:{line:59,column:24}},loc:{start:{line:59,column:40},end:{line:61,column:9}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:62,column:22},end:{line:62,column:23}},loc:{start:{line:62,column:28},end:{line:70,column:9}},line:62}},branchMap:{"0":{loc:{start:{line:19,column:8},end:{line:21,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:21,column:9}},{start:{line:19,column:8},end:{line:21,column:9}}],line:19}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"44f36e11dad95a7e3bd5dc3699b0b14a93330970"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1hm86qp3s0=function(){return actualCoverage;};}return actualCoverage;}cov_1hm86qp3s0();/** Acquiring the modules. */const url=(cov_1hm86qp3s0().s[0]++,require('url'));const queryString=(cov_1hm86qp3s0().s[1]++,require('querystring'));/** Class representing the request which has the properties of controllerName, actionName and params,
 * for the purpose of initialising and setting the request object fetched from client. This class is 
 * responsible for parsing the URL and setting the properties of the request instance. Since, no 
 * multiple incoming requests can be dealt after receiving the request so the instance of this class 
 * is made singleton using Singleton Design Pattern. 
 */cov_1hm86qp3s0().s[2]++;module.exports=class Request{/**
     * Get the singleton instance of the Request class.
     * @returns {Object} The Request instance.
     */static getInstance(){cov_1hm86qp3s0().f[0]++;cov_1hm86qp3s0().s[3]++;if(!Request.instance){cov_1hm86qp3s0().b[0][0]++;cov_1hm86qp3s0().s[4]++;Request.instance=new Request();}else{cov_1hm86qp3s0().b[0][1]++;}cov_1hm86qp3s0().s[5]++;return Request.instance;}/**
     * Get the controller name.
     * @returns {string} The controller name.
     */getController(){cov_1hm86qp3s0().f[1]++;cov_1hm86qp3s0().s[6]++;return this.controllerName;}/**
     * Get the action name.
     * @returns {string} The action name.
     */getAction(){cov_1hm86qp3s0().f[2]++;cov_1hm86qp3s0().s[7]++;return this.actionName;}/**
    * Get the params object.
    * @returns {Object} The params object.
    */getParams(){cov_1hm86qp3s0().f[3]++;cov_1hm86qp3s0().s[8]++;return this.params;}/**
     * Initialises and sets the request. It receives the request as an argument, parses the URL for the purpose 
     * of retrieving the parameters from the body of URL, assings the parameters to the class properties and then
     * executes the callback function.
     * @param {string} req 
     * @param {callBack} callBack 
     */initialiseRequest(req,callBack){cov_1hm86qp3s0().f[4]++;let body=(cov_1hm86qp3s0().s[9]++,[]);cov_1hm86qp3s0().s[10]++;req.on('data',function(chunk){cov_1hm86qp3s0().f[5]++;cov_1hm86qp3s0().s[11]++;body.push(chunk);});cov_1hm86qp3s0().s[12]++;req.on('end',()=>{cov_1hm86qp3s0().f[6]++;cov_1hm86qp3s0().s[13]++;body=Buffer.concat(body).toString();const paramsName=(cov_1hm86qp3s0().s[14]++,queryString.parse(body));let queryObject=(cov_1hm86qp3s0().s[15]++,url.parse(req.url,true).query);cov_1hm86qp3s0().s[16]++;this.controllerName=queryObject.controller;cov_1hm86qp3s0().s[17]++;this.actionName=queryObject.action;cov_1hm86qp3s0().s[18]++;this.params=paramsName;cov_1hm86qp3s0().s[19]++;callBack();});}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QuanMiXSwibmFtZXMiOlsidXJsIiwicmVxdWlyZSIsInF1ZXJ5U3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJlcXVlc3QiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwiZ2V0Q29udHJvbGxlciIsImNvbnRyb2xsZXJOYW1lIiwiZ2V0QWN0aW9uIiwiYWN0aW9uTmFtZSIsImdldFBhcmFtcyIsInBhcmFtcyIsImluaXRpYWxpc2VSZXF1ZXN0IiwicmVxIiwiY2FsbEJhY2siLCJib2R5Iiwib24iLCJjaHVuayIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiLCJ0b1N0cmluZyIsInBhcmFtc05hbWUiLCJwYXJzZSIsInF1ZXJ5T2JqZWN0IiwicXVlcnkiLCJjb250cm9sbGVyIiwiYWN0aW9uIl0sIm1hcHBpbmdzIjoiMmhHQWVZOzJGQWZaLDZCQUNBLEtBQU1BLENBQUFBLEdBQUcsMEJBQUdDLE9BQU8sQ0FBQyxLQUFELENBQVYsQ0FBVCxDQUNBLEtBQU1DLENBQUFBLFdBQVcsMEJBQUdELE9BQU8sQ0FBQyxhQUFELENBQVYsQ0FBakIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx3QkFFQUUsTUFBTSxDQUFDQyxPQUFQLENBQWlCLEtBQU1DLENBQUFBLE9BQVEsQ0FFM0I7QUFDSjtBQUNBO0FBQ0EsT0FDc0IsTUFBWEMsQ0FBQUEsV0FBVyxFQUFHLGlEQUNqQixHQUFJLENBQUNELE9BQU8sQ0FBQ0UsUUFBYixDQUF1QixvREFDbkJGLE9BQU8sQ0FBQ0UsUUFBUixDQUFtQixHQUFJRixDQUFBQSxPQUFKLEVBQW5CLENBQ0gsQ0FGRCxpQ0FEaUIsd0JBSWpCLE1BQU9BLENBQUFBLE9BQU8sQ0FBQ0UsUUFBZixDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsT0FDSUMsYUFBYSxFQUFHLGlEQUNaLE1BQU8sTUFBS0MsY0FBWixDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsT0FDSUMsU0FBUyxFQUFHLGlEQUNSLE1BQU8sTUFBS0MsVUFBWixDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsTUFDSUMsU0FBUyxFQUFHLGlEQUNSLE1BQU8sTUFBS0MsTUFBWixDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FDSUMsaUJBQWlCLENBQUNDLEdBQUQsQ0FBTUMsUUFBTixDQUFnQix5QkFFN0IsR0FBSUMsQ0FBQUEsSUFBSSwwQkFBRyxFQUFILENBQVIsQ0FGNkIseUJBRzdCRixHQUFHLENBQUNHLEVBQUosQ0FBTyxNQUFQLENBQWUsU0FBVUMsS0FBVixDQUFpQixrREFDNUJGLElBQUksQ0FBQ0csSUFBTCxDQUFVRCxLQUFWLEVBQ0gsQ0FGRCxFQUg2Qix5QkFNN0JKLEdBQUcsQ0FBQ0csRUFBSixDQUFPLEtBQVAsQ0FBYyxJQUFNLGtEQUNoQkQsSUFBSSxDQUFHSSxNQUFNLENBQUNDLE1BQVAsQ0FBY0wsSUFBZCxFQUFvQk0sUUFBcEIsRUFBUCxDQUNBLEtBQU1DLENBQUFBLFVBQVUsMkJBQUd0QixXQUFXLENBQUN1QixLQUFaLENBQWtCUixJQUFsQixDQUFILENBQWhCLENBQ0EsR0FBSVMsQ0FBQUEsV0FBVywyQkFBRzFCLEdBQUcsQ0FBQ3lCLEtBQUosQ0FBVVYsR0FBRyxDQUFDZixHQUFkLENBQW1CLElBQW5CLEVBQXlCMkIsS0FBNUIsQ0FBZixDQUhnQix5QkFJaEIsS0FBS2xCLGNBQUwsQ0FBc0JpQixXQUFXLENBQUNFLFVBQWxDLENBSmdCLHlCQUtoQixLQUFLakIsVUFBTCxDQUFrQmUsV0FBVyxDQUFDRyxNQUE5QixDQUxnQix5QkFNaEIsS0FBS2hCLE1BQUwsQ0FBY1csVUFBZCxDQU5nQix5QkFPaEJSLFFBQVEsR0FDWCxDQVJELEVBU0gsQ0EzRDBCLENBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEFjcXVpcmluZyB0aGUgbW9kdWxlcy4gKi9cbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuY29uc3QgcXVlcnlTdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSByZXF1ZXN0IHdoaWNoIGhhcyB0aGUgcHJvcGVydGllcyBvZiBjb250cm9sbGVyTmFtZSwgYWN0aW9uTmFtZSBhbmQgcGFyYW1zLFxuICogZm9yIHRoZSBwdXJwb3NlIG9mIGluaXRpYWxpc2luZyBhbmQgc2V0dGluZyB0aGUgcmVxdWVzdCBvYmplY3QgZmV0Y2hlZCBmcm9tIGNsaWVudC4gVGhpcyBjbGFzcyBpcyBcbiAqIHJlc3BvbnNpYmxlIGZvciBwYXJzaW5nIHRoZSBVUkwgYW5kIHNldHRpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHJlcXVlc3QgaW5zdGFuY2UuIFNpbmNlLCBubyBcbiAqIG11bHRpcGxlIGluY29taW5nIHJlcXVlc3RzIGNhbiBiZSBkZWFsdCBhZnRlciByZWNlaXZpbmcgdGhlIHJlcXVlc3Qgc28gdGhlIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgXG4gKiBpcyBtYWRlIHNpbmdsZXRvbiB1c2luZyBTaW5nbGV0b24gRGVzaWduIFBhdHRlcm4uIFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUmVxdWVzdCB7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgUmVxdWVzdCBjbGFzcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgUmVxdWVzdCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghUmVxdWVzdC5pbnN0YW5jZSkge1xuICAgICAgICAgICAgUmVxdWVzdC5pbnN0YW5jZSA9IG5ldyBSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlcXVlc3QuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb250cm9sbGVyIG5hbWUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbnRyb2xsZXIgbmFtZS5cbiAgICAgKi9cbiAgICBnZXRDb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFjdGlvbiBuYW1lLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBhY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBnZXRBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbk5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHBhcmFtcyBvYmplY3QuXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFyYW1zIG9iamVjdC5cbiAgICAqL1xuICAgIGdldFBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIGFuZCBzZXRzIHRoZSByZXF1ZXN0LiBJdCByZWNlaXZlcyB0aGUgcmVxdWVzdCBhcyBhbiBhcmd1bWVudCwgcGFyc2VzIHRoZSBVUkwgZm9yIHRoZSBwdXJwb3NlIFxuICAgICAqIG9mIHJldHJpZXZpbmcgdGhlIHBhcmFtZXRlcnMgZnJvbSB0aGUgYm9keSBvZiBVUkwsIGFzc2luZ3MgdGhlIHBhcmFtZXRlcnMgdG8gdGhlIGNsYXNzIHByb3BlcnRpZXMgYW5kIHRoZW5cbiAgICAgKiBleGVjdXRlcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcSBcbiAgICAgKiBAcGFyYW0ge2NhbGxCYWNrfSBjYWxsQmFjayBcbiAgICAgKi9cbiAgICBpbml0aWFsaXNlUmVxdWVzdChyZXEsIGNhbGxCYWNrKSB7XG5cbiAgICAgICAgbGV0IGJvZHkgPSBbXTtcbiAgICAgICAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgICAgICBib2R5LnB1c2goY2h1bmspO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVxLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICBib2R5ID0gQnVmZmVyLmNvbmNhdChib2R5KS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zTmFtZSA9IHF1ZXJ5U3RyaW5nLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5T2JqZWN0ID0gdXJsLnBhcnNlKHJlcS51cmwsIHRydWUpLnF1ZXJ5O1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyTmFtZSA9IHF1ZXJ5T2JqZWN0LmNvbnRyb2xsZXI7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbk5hbWUgPSBxdWVyeU9iamVjdC5hY3Rpb247XG4gICAgICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtc05hbWU7XG4gICAgICAgICAgICBjYWxsQmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=