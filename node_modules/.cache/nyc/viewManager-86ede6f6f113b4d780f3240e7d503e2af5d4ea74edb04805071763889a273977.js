function cov_s7n1lwaws(){var path="/home/eiman.waheed/Desktop/mvc-node/core/views/viewManager.js";var hash="dcc7321f9cd4e7c2f377d54f94f9fddea157afd7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/views/viewManager.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:68}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:19,column:8},end:{line:29,column:9}},"3":{start:{line:20,column:23},end:{line:20,column:36}},"4":{start:{line:21,column:29},end:{line:21,column:55}},"5":{start:{line:22,column:29},end:{line:22,column:127}},"6":{start:{line:23,column:31},end:{line:23,column:74}},"7":{start:{line:24,column:12},end:{line:24,column:44}},"8":{start:{line:25,column:12},end:{line:25,column:28}},"9":{start:{line:28,column:12},end:{line:28,column:62}},"10":{start:{line:37,column:8},end:{line:37,column:42}},"11":{start:{line:38,column:8},end:{line:38,column:39}},"12":{start:{line:41,column:0},end:{line:41,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:31,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:20},end:{line:39,column:5}},line:36}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dcc7321f9cd4e7c2f377d54f94f9fddea157afd7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_s7n1lwaws=function(){return actualCoverage;};}return actualCoverage;}cov_s7n1lwaws();const autoload=(cov_s7n1lwaws().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const mustache=(cov_s7n1lwaws().s[1]++,require('mustache'));/** Class representing View Manager which is responsible for loading view and setting the key for rendering the data.
 * It loads all the views that are present, renders them and displays them on the screen. For the purpose of setting 
 * the data from database dynamically, it makes use of the Mustache.js and renders the data and make it available.
 */class ViewManager{/**
     * Loads the views specified in the controllerName and actionName for student, course,
     * teacher and default. For the purpose of setting the response object, it reads the 
     * html files and sets the data dynamically to be displayed on screen using Mustache.render
     * and returns the response object. 
     * @param {string} controllerName 
     * @param {string} actionName 
     * @returns {Object} response
     */loadView(controllerName,actionName){cov_s7n1lwaws().f[0]++;cov_s7n1lwaws().s[2]++;try{const fs=(cov_s7n1lwaws().s[3]++,require('fs'));const response=(cov_s7n1lwaws().s[4]++,new(autoload('response'))());const htmlData=(cov_s7n1lwaws().s[5]++,fs.readFileSync(`${process.env.FILEPATH}/app/views/${controllerName}/${actionName}.html`,'utf-8'));const viewString=(cov_s7n1lwaws().s[6]++,mustache.render(htmlData,this.templateKey));cov_s7n1lwaws().s[7]++;response.setContent(viewString);cov_s7n1lwaws().s[8]++;return response;}catch(error){cov_s7n1lwaws().s[9]++;throw new Error(`${actionName} view not loaded.`);}}/**
     * Sets the database fetched data in the class property.
     * @param {string} data 
     */setData(result){cov_s7n1lwaws().f[1]++;cov_s7n1lwaws().s[10]++;this.templateKey={'data':[]};cov_s7n1lwaws().s[11]++;this.templateKey.data=result;}}cov_s7n1lwaws().s[12]++;module.exports=ViewManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImF1dG9sb2FkIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJGSUxFUEFUSCIsIm11c3RhY2hlIiwiVmlld01hbmFnZXIiLCJsb2FkVmlldyIsImNvbnRyb2xsZXJOYW1lIiwiYWN0aW9uTmFtZSIsImZzIiwicmVzcG9uc2UiLCJodG1sRGF0YSIsInJlYWRGaWxlU3luYyIsInZpZXdTdHJpbmciLCJyZW5kZXIiLCJ0ZW1wbGF0ZUtleSIsInNldENvbnRlbnQiLCJlcnJvciIsIkVycm9yIiwic2V0RGF0YSIsInJlc3VsdCIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoidXJEQWVZO3lGQWZaLEtBQU1BLENBQUFBLFFBQVEseUJBQUdDLE9BQU8sQ0FBRSxHQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBUyxtQkFBekIsQ0FBVixDQUFkLENBQ0EsS0FBTUMsQ0FBQUEsUUFBUSx5QkFBR0osT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFkLENBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNSyxDQUFBQSxXQUFZLENBRWQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLFFBQVEsQ0FBQ0MsY0FBRCxDQUFpQkMsVUFBakIsQ0FBNkIsK0NBQ2pDLEdBQUksQ0FDQSxLQUFNQyxDQUFBQSxFQUFFLHlCQUFHVCxPQUFPLENBQUMsSUFBRCxDQUFWLENBQVIsQ0FDQSxLQUFNVSxDQUFBQSxRQUFRLHlCQUFHLElBQUtYLFFBQVEsQ0FBQyxVQUFELENBQWIsR0FBSCxDQUFkLENBQ0EsS0FBTVksQ0FBQUEsUUFBUSx5QkFBR0YsRUFBRSxDQUFDRyxZQUFILENBQWlCLEdBQUVYLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLGNBQWFJLGNBQWUsSUFBR0MsVUFBVyxPQUFsRixDQUEwRixPQUExRixDQUFILENBQWQsQ0FDQSxLQUFNSyxDQUFBQSxVQUFVLHlCQUFHVCxRQUFRLENBQUNVLE1BQVQsQ0FBZ0JILFFBQWhCLENBQTBCLEtBQUtJLFdBQS9CLENBQUgsQ0FBaEIsQ0FKQSx1QkFLQUwsUUFBUSxDQUFDTSxVQUFULENBQW9CSCxVQUFwQixFQUxBLHVCQU1BLE1BQU9ILENBQUFBLFFBQVAsQ0FDSCxDQUNELE1BQU9PLEtBQVAsQ0FBYyx3QkFDVixLQUFNLElBQUlDLENBQUFBLEtBQUosQ0FBVyxHQUFFVixVQUFXLG1CQUF4QixDQUFOLENBQ0gsQ0FFSixDQUNEO0FBQ0o7QUFDQTtBQUNBLE9BQ0lXLE9BQU8sQ0FBQ0MsTUFBRCxDQUFTLGdEQUNaLEtBQUtMLFdBQUwsQ0FBbUIsQ0FBRSxPQUFRLEVBQVYsQ0FBbkIsQ0FEWSx3QkFFWixLQUFLQSxXQUFMLENBQWlCTSxJQUFqQixDQUF3QkQsTUFBeEIsQ0FDSCxDQWhDYSxDLHdCQWtDbEJFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQmxCLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXV0b2xvYWQgPSByZXF1aXJlKGAke3Byb2Nlc3MuZW52LkZJTEVQQVRIfS9jb3JlL2F1dG9sb2FkLmpzYCk7XG5jb25zdCBtdXN0YWNoZSA9IHJlcXVpcmUoJ211c3RhY2hlJyk7XG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIFZpZXcgTWFuYWdlciB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgbG9hZGluZyB2aWV3IGFuZCBzZXR0aW5nIHRoZSBrZXkgZm9yIHJlbmRlcmluZyB0aGUgZGF0YS5cbiAqIEl0IGxvYWRzIGFsbCB0aGUgdmlld3MgdGhhdCBhcmUgcHJlc2VudCwgcmVuZGVycyB0aGVtIGFuZCBkaXNwbGF5cyB0aGVtIG9uIHRoZSBzY3JlZW4uIEZvciB0aGUgcHVycG9zZSBvZiBzZXR0aW5nIFxuICogdGhlIGRhdGEgZnJvbSBkYXRhYmFzZSBkeW5hbWljYWxseSwgaXQgbWFrZXMgdXNlIG9mIHRoZSBNdXN0YWNoZS5qcyBhbmQgcmVuZGVycyB0aGUgZGF0YSBhbmQgbWFrZSBpdCBhdmFpbGFibGUuXG4gKi9cbmNsYXNzIFZpZXdNYW5hZ2VyIHtcblxuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSB2aWV3cyBzcGVjaWZpZWQgaW4gdGhlIGNvbnRyb2xsZXJOYW1lIGFuZCBhY3Rpb25OYW1lIGZvciBzdHVkZW50LCBjb3Vyc2UsXG4gICAgICogdGVhY2hlciBhbmQgZGVmYXVsdC4gRm9yIHRoZSBwdXJwb3NlIG9mIHNldHRpbmcgdGhlIHJlc3BvbnNlIG9iamVjdCwgaXQgcmVhZHMgdGhlIFxuICAgICAqIGh0bWwgZmlsZXMgYW5kIHNldHMgdGhlIGRhdGEgZHluYW1pY2FsbHkgdG8gYmUgZGlzcGxheWVkIG9uIHNjcmVlbiB1c2luZyBNdXN0YWNoZS5yZW5kZXJcbiAgICAgKiBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2Ugb2JqZWN0LiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udHJvbGxlck5hbWUgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbk5hbWUgXG4gICAgICogQHJldHVybnMge09iamVjdH0gcmVzcG9uc2VcbiAgICAgKi9cbiAgICBsb2FkVmlldyhjb250cm9sbGVyTmFtZSwgYWN0aW9uTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgKGF1dG9sb2FkKCdyZXNwb25zZScpKTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWxEYXRhID0gZnMucmVhZEZpbGVTeW5jKGAke3Byb2Nlc3MuZW52LkZJTEVQQVRIfS9hcHAvdmlld3MvJHtjb250cm9sbGVyTmFtZX0vJHthY3Rpb25OYW1lfS5odG1sYCwgJ3V0Zi04Jyk7XG4gICAgICAgICAgICBjb25zdCB2aWV3U3RyaW5nID0gbXVzdGFjaGUucmVuZGVyKGh0bWxEYXRhLCB0aGlzLnRlbXBsYXRlS2V5KTtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldENvbnRlbnQodmlld1N0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YWN0aW9uTmFtZX0gdmlldyBub3QgbG9hZGVkLmApO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YWJhc2UgZmV0Y2hlZCBkYXRhIGluIHRoZSBjbGFzcyBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBcbiAgICAgKi9cbiAgICBzZXREYXRhKHJlc3VsdCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlS2V5ID0geyAnZGF0YSc6IFtdIH07XG4gICAgICAgIHRoaXMudGVtcGxhdGVLZXkuZGF0YSA9IHJlc3VsdDtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdNYW5hZ2VyOyJdfQ==