function cov_s7n1lwaws(){var path="/home/eiman.waheed/Desktop/mvc-node/core/views/viewManager.js";var hash="c8cc1baab53f48941fb4a4c2720c3b358d7f2533";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/views/viewManager.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:68}},"1":{start:{line:3,column:17},end:{line:3,column:36}},"2":{start:{line:8,column:0},end:{line:41,column:1}},"3":{start:{line:20,column:8},end:{line:30,column:9}},"4":{start:{line:21,column:23},end:{line:21,column:36}},"5":{start:{line:22,column:29},end:{line:22,column:55}},"6":{start:{line:23,column:29},end:{line:23,column:127}},"7":{start:{line:24,column:31},end:{line:24,column:74}},"8":{start:{line:25,column:12},end:{line:25,column:44}},"9":{start:{line:26,column:12},end:{line:26,column:28}},"10":{start:{line:29,column:12},end:{line:29,column:62}},"11":{start:{line:38,column:8},end:{line:38,column:42}},"12":{start:{line:39,column:8},end:{line:39,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:41},end:{line:32,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:20},end:{line:40,column:5}},line:37}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c8cc1baab53f48941fb4a4c2720c3b358d7f2533"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_s7n1lwaws=function(){return actualCoverage;};}return actualCoverage;}cov_s7n1lwaws();/** Acquiring autoloader. */const autoload=(cov_s7n1lwaws().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const mustache=(cov_s7n1lwaws().s[1]++,require('mustache'));/** Class representing View Manager which is responsible for loading view and setting the key for rendering the data.
 * It loads all the views that are present, renders them and displays them on the screen. For the purpose of setting 
 * the data from database dynamically, it makes use of the Mustache.js and renders the data and make it available.
 */cov_s7n1lwaws().s[2]++;module.exports=class ViewManager{/**
     * Loads the views specified in the controllerName and actionName for student, course,
     * teacher and default. For the purpose of setting the response object, it reads the 
     * html files and sets the data dynamically to be displayed on screen using Mustache.render
     * and returns the response object. 
     * @param {string} controllerName 
     * @param {string} actionName 
     * @returns {Object} response
     */loadView(controllerName,actionName){cov_s7n1lwaws().f[0]++;cov_s7n1lwaws().s[3]++;try{const fs=(cov_s7n1lwaws().s[4]++,require('fs'));const response=(cov_s7n1lwaws().s[5]++,new(autoload('response'))());const htmlData=(cov_s7n1lwaws().s[6]++,fs.readFileSync(`${process.env.FILEPATH}/app/views/${controllerName}/${actionName}.html`,'utf-8'));const viewString=(cov_s7n1lwaws().s[7]++,mustache.render(htmlData,this.templateKey));cov_s7n1lwaws().s[8]++;response.setContent(viewString);cov_s7n1lwaws().s[9]++;return response;}catch(error){cov_s7n1lwaws().s[10]++;throw new Error(`${actionName} view not loaded.`);}}/**
     * Sets the database fetched data in the class property.
     * @param {string} data 
     */setData(result){cov_s7n1lwaws().f[1]++;cov_s7n1lwaws().s[11]++;this.templateKey={'data':[]};cov_s7n1lwaws().s[12]++;this.templateKey.data=result;}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImF1dG9sb2FkIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJGSUxFUEFUSCIsIm11c3RhY2hlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlZpZXdNYW5hZ2VyIiwibG9hZFZpZXciLCJjb250cm9sbGVyTmFtZSIsImFjdGlvbk5hbWUiLCJmcyIsInJlc3BvbnNlIiwiaHRtbERhdGEiLCJyZWFkRmlsZVN5bmMiLCJ2aWV3U3RyaW5nIiwicmVuZGVyIiwidGVtcGxhdGVLZXkiLCJzZXRDb250ZW50IiwiZXJyb3IiLCJFcnJvciIsInNldERhdGEiLCJyZXN1bHQiLCJkYXRhIl0sIm1hcHBpbmdzIjoicXJEQWVZO3lGQWZaLDRCQUNBLEtBQU1BLENBQUFBLFFBQVEseUJBQUdDLE9BQU8sQ0FBRSxHQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBUyxtQkFBekIsQ0FBVixDQUFkLENBQ0EsS0FBTUMsQ0FBQUEsUUFBUSx5QkFBR0osT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFkLENBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx1QkFDQUssTUFBTSxDQUFDQyxPQUFQLENBQWlCLEtBQU1DLENBQUFBLFdBQVksQ0FFL0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLFFBQVEsQ0FBQ0MsY0FBRCxDQUFpQkMsVUFBakIsQ0FBNkIsK0NBQ2pDLEdBQUksQ0FDQSxLQUFNQyxDQUFBQSxFQUFFLHlCQUFHWCxPQUFPLENBQUMsSUFBRCxDQUFWLENBQVIsQ0FDQSxLQUFNWSxDQUFBQSxRQUFRLHlCQUFHLElBQUtiLFFBQVEsQ0FBQyxVQUFELENBQWIsR0FBSCxDQUFkLENBQ0EsS0FBTWMsQ0FBQUEsUUFBUSx5QkFBR0YsRUFBRSxDQUFDRyxZQUFILENBQWlCLEdBQUViLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLGNBQWFNLGNBQWUsSUFBR0MsVUFBVyxPQUFsRixDQUEwRixPQUExRixDQUFILENBQWQsQ0FDQSxLQUFNSyxDQUFBQSxVQUFVLHlCQUFHWCxRQUFRLENBQUNZLE1BQVQsQ0FBZ0JILFFBQWhCLENBQTBCLEtBQUtJLFdBQS9CLENBQUgsQ0FBaEIsQ0FKQSx1QkFLQUwsUUFBUSxDQUFDTSxVQUFULENBQW9CSCxVQUFwQixFQUxBLHVCQU1BLE1BQU9ILENBQUFBLFFBQVAsQ0FDSCxDQUNELE1BQU9PLEtBQVAsQ0FBYyx5QkFDVixLQUFNLElBQUlDLENBQUFBLEtBQUosQ0FBVyxHQUFFVixVQUFXLG1CQUF4QixDQUFOLENBQ0gsQ0FFSixDQUNEO0FBQ0o7QUFDQTtBQUNBLE9BQ0lXLE9BQU8sQ0FBQ0MsTUFBRCxDQUFTLGdEQUNaLEtBQUtMLFdBQUwsQ0FBbUIsQ0FBRSxPQUFRLEVBQVYsQ0FBbkIsQ0FEWSx3QkFFWixLQUFLQSxXQUFMLENBQWlCTSxJQUFqQixDQUF3QkQsTUFBeEIsQ0FDSCxDQWhDOEIsQ0FBbkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQWNxdWlyaW5nIGF1dG9sb2FkZXIuICovXG5jb25zdCBhdXRvbG9hZCA9IHJlcXVpcmUoYCR7cHJvY2Vzcy5lbnYuRklMRVBBVEh9L2NvcmUvYXV0b2xvYWQuanNgKTtcbmNvbnN0IG11c3RhY2hlID0gcmVxdWlyZSgnbXVzdGFjaGUnKTtcbi8qKiBDbGFzcyByZXByZXNlbnRpbmcgVmlldyBNYW5hZ2VyIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nIHZpZXcgYW5kIHNldHRpbmcgdGhlIGtleSBmb3IgcmVuZGVyaW5nIHRoZSBkYXRhLlxuICogSXQgbG9hZHMgYWxsIHRoZSB2aWV3cyB0aGF0IGFyZSBwcmVzZW50LCByZW5kZXJzIHRoZW0gYW5kIGRpc3BsYXlzIHRoZW0gb24gdGhlIHNjcmVlbi4gRm9yIHRoZSBwdXJwb3NlIG9mIHNldHRpbmcgXG4gKiB0aGUgZGF0YSBmcm9tIGRhdGFiYXNlIGR5bmFtaWNhbGx5LCBpdCBtYWtlcyB1c2Ugb2YgdGhlIE11c3RhY2hlLmpzIGFuZCByZW5kZXJzIHRoZSBkYXRhIGFuZCBtYWtlIGl0IGF2YWlsYWJsZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBWaWV3TWFuYWdlciB7XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgdmlld3Mgc3BlY2lmaWVkIGluIHRoZSBjb250cm9sbGVyTmFtZSBhbmQgYWN0aW9uTmFtZSBmb3Igc3R1ZGVudCwgY291cnNlLFxuICAgICAqIHRlYWNoZXIgYW5kIGRlZmF1bHQuIEZvciB0aGUgcHVycG9zZSBvZiBzZXR0aW5nIHRoZSByZXNwb25zZSBvYmplY3QsIGl0IHJlYWRzIHRoZSBcbiAgICAgKiBodG1sIGZpbGVzIGFuZCBzZXRzIHRoZSBkYXRhIGR5bmFtaWNhbGx5IHRvIGJlIGRpc3BsYXllZCBvbiBzY3JlZW4gdXNpbmcgTXVzdGFjaGUucmVuZGVyXG4gICAgICogYW5kIHJldHVybnMgdGhlIHJlc3BvbnNlIG9iamVjdC4gXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRyb2xsZXJOYW1lIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25OYW1lIFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJlc3BvbnNlXG4gICAgICovXG4gICAgbG9hZFZpZXcoY29udHJvbGxlck5hbWUsIGFjdGlvbk5hbWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IChhdXRvbG9hZCgncmVzcG9uc2UnKSk7XG4gICAgICAgICAgICBjb25zdCBodG1sRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhgJHtwcm9jZXNzLmVudi5GSUxFUEFUSH0vYXBwL3ZpZXdzLyR7Y29udHJvbGxlck5hbWV9LyR7YWN0aW9uTmFtZX0uaHRtbGAsICd1dGYtOCcpO1xuICAgICAgICAgICAgY29uc3Qgdmlld1N0cmluZyA9IG11c3RhY2hlLnJlbmRlcihodG1sRGF0YSwgdGhpcy50ZW1wbGF0ZUtleSk7XG4gICAgICAgICAgICByZXNwb25zZS5zZXRDb250ZW50KHZpZXdTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2FjdGlvbk5hbWV9IHZpZXcgbm90IGxvYWRlZC5gKTtcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGFiYXNlIGZldGNoZWQgZGF0YSBpbiB0aGUgY2xhc3MgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgXG4gICAgICovXG4gICAgc2V0RGF0YShyZXN1bHQpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUtleSA9IHsgJ2RhdGEnOiBbXSB9O1xuICAgICAgICB0aGlzLnRlbXBsYXRlS2V5LmRhdGEgPSByZXN1bHQ7XG4gICAgfVxufSJdfQ==