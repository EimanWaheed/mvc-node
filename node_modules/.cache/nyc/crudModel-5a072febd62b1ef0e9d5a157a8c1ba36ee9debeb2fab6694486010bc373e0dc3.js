function cov_1rqbr98ndl(){var path="/home/eiman.waheed/Desktop/mvc-node/core/models/crudModel.js";var hash="ff7be430235d0eff1808ff32e15099895749cdb0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/models/crudModel.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:68}},"1":{start:{line:3,column:18},end:{line:3,column:45}},"2":{start:{line:11,column:0},end:{line:105,column:1}},"3":{start:{line:32,column:8},end:{line:32,column:27}},"4":{start:{line:42,column:8},end:{line:49,column:9}},"5":{start:{line:43,column:12},end:{line:43,column:47}},"6":{start:{line:44,column:30},end:{line:44,column:72}},"7":{start:{line:45,column:12},end:{line:45,column:60}},"8":{start:{line:48,column:12},end:{line:48,column:35}},"9":{start:{line:60,column:8},end:{line:67,column:9}},"10":{start:{line:61,column:12},end:{line:61,column:47}},"11":{start:{line:62,column:30},end:{line:62,column:72}},"12":{start:{line:63,column:12},end:{line:63,column:60}},"13":{start:{line:66,column:12},end:{line:66,column:35}},"14":{start:{line:78,column:8},end:{line:85,column:9}},"15":{start:{line:79,column:12},end:{line:79,column:47}},"16":{start:{line:80,column:30},end:{line:80,column:70}},"17":{start:{line:81,column:12},end:{line:81,column:60}},"18":{start:{line:84,column:12},end:{line:84,column:35}},"19":{start:{line:96,column:8},end:{line:103,column:9}},"20":{start:{line:97,column:12},end:{line:97,column:47}},"21":{start:{line:98,column:30},end:{line:98,column:72}},"22":{start:{line:99,column:12},end:{line:99,column:60}},"23":{start:{line:102,column:12},end:{line:102,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:16},end:{line:33,column:5}},line:31},"1":{name:"(anonymous_1)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:19},end:{line:50,column:5}},line:41},"2":{name:"(anonymous_2)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:19},end:{line:68,column:5}},line:59},"3":{name:"(anonymous_3)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:17},end:{line:86,column:5}},line:77},"4":{name:"(anonymous_4)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:19},end:{line:104,column:5}},line:95}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ff7be430235d0eff1808ff32e15099895749cdb0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rqbr98ndl=function(){return actualCoverage;};}return actualCoverage;}cov_1rqbr98ndl();/** Acquiring autoloader. */const autoload=(cov_1rqbr98ndl().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const dbFactory=(cov_1rqbr98ndl().s[1]++,new(autoload('dbFactory'))());/** Class representing CRUD operations which will be responsible for creating,
 * updating, deleting and listing records. These CRUD operations are perfomed
 * for the specific model and thus querybuilder is responsible for generating
 * the query and returning its results back. This class also handles the use of
 * driver instance which will run the query.
 */cov_1rqbr98ndl().s[2]++;module.exports=class CRUDModel{/**
     * Returns the driver object of the specified database. 
     * @return {object} Driver object.
     */ /* istanbul ignore next */getDriver(){return dbFactory.loadDriver();}/**
     * Returns the querybuilder object of the specified database. 
     * @return {object} QueryBuilder object.
     */ /* istanbul ignore next */getQueryBuilder(){return dbFactory.loadQueryBuilder();}getEntity(){cov_1rqbr98ndl().f[0]++;cov_1rqbr98ndl().s[3]++;return this.entity;}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the insert query and 
     * execute it respectively.
     * @param {object} params 
     */create(params){cov_1rqbr98ndl().f[1]++;cov_1rqbr98ndl().s[4]++;try{cov_1rqbr98ndl().s[5]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[6]++,this.getQueryBuilder().create(this.entity));cov_1rqbr98ndl().s[7]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[8]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the update query and 
     * execute it respectively.
     * @param {object} params 
     */update(params){cov_1rqbr98ndl().f[2]++;cov_1rqbr98ndl().s[9]++;try{cov_1rqbr98ndl().s[10]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[11]++,this.getQueryBuilder().update(this.entity));cov_1rqbr98ndl().s[12]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[13]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the select query and 
     * execute it respectively.
     * @param {object} params 
     */list(params){cov_1rqbr98ndl().f[3]++;cov_1rqbr98ndl().s[14]++;try{cov_1rqbr98ndl().s[15]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[16]++,this.getQueryBuilder().list(this.entity));cov_1rqbr98ndl().s[17]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[18]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the delete query and 
     * execute it respectively.
     * @param {object} params 
     */delete(params){cov_1rqbr98ndl().f[4]++;cov_1rqbr98ndl().s[19]++;try{cov_1rqbr98ndl().s[20]++;this.getEntity().setEntity(params);let queryString=(cov_1rqbr98ndl().s[21]++,this.getQueryBuilder().delete(this.entity));cov_1rqbr98ndl().s[22]++;return this.getDriver().runQuery(queryString);}catch(error){cov_1rqbr98ndl().s[23]++;throw new Error(error);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNydWRNb2RlbC5qcyJdLCJuYW1lcyI6WyJhdXRvbG9hZCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiRklMRVBBVEgiLCJkYkZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ1JVRE1vZGVsIiwiZ2V0RHJpdmVyIiwibG9hZERyaXZlciIsImdldFF1ZXJ5QnVpbGRlciIsImxvYWRRdWVyeUJ1aWxkZXIiLCJnZXRFbnRpdHkiLCJlbnRpdHkiLCJjcmVhdGUiLCJwYXJhbXMiLCJzZXRFbnRpdHkiLCJxdWVyeVN0cmluZyIsInJ1blF1ZXJ5IiwiZXJyb3IiLCJFcnJvciIsInVwZGF0ZSIsImxpc3QiLCJkZWxldGUiXSwibWFwcGluZ3MiOiJ5ekZBZVk7MkZBZlosNEJBQ0EsS0FBTUEsQ0FBQUEsUUFBUSwwQkFBR0MsT0FBTyxDQUFFLEdBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFTLG1CQUF6QixDQUFWLENBQWQsQ0FDQSxLQUFNQyxDQUFBQSxTQUFTLDBCQUFHLElBQUtMLFFBQVEsQ0FBQyxXQUFELENBQWIsR0FBSCxDQUFmLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBQ0FNLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixLQUFNQyxDQUFBQSxTQUFVLENBRTdCO0FBQ0o7QUFDQTtBQUNBLE9BTGlDLENBTTdCLDBCQUNBQyxTQUFTLEVBQUcsQ0FDUixNQUFPSixDQUFBQSxTQUFTLENBQUNLLFVBQVYsRUFBUCxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0EsT0FkaUMsQ0FlN0IsMEJBQ0FDLGVBQWUsRUFBRyxDQUNkLE1BQU9OLENBQUFBLFNBQVMsQ0FBQ08sZ0JBQVYsRUFBUCxDQUNILENBRURDLFNBQVMsRUFBRyxpREFDUixNQUFPLE1BQUtDLE1BQVosQ0FDSCxDQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLE1BQU0sQ0FBQ0MsTUFBRCxDQUFTLGlEQUNYLEdBQUkseUJBQ0EsS0FBS0gsU0FBTCxHQUFpQkksU0FBakIsQ0FBMkJELE1BQTNCLEVBQ0EsR0FBSUUsQ0FBQUEsV0FBVywwQkFBRyxLQUFLUCxlQUFMLEdBQXVCSSxNQUF2QixDQUE4QixLQUFLRCxNQUFuQyxDQUFILENBQWYsQ0FGQSx3QkFHQSxNQUFRLE1BQUtMLFNBQUwsR0FBaUJVLFFBQWpCLENBQTBCRCxXQUExQixDQUFSLENBQ0gsQ0FDRCxNQUFPRSxLQUFQLENBQWMseUJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVVELEtBQVYsQ0FBTixDQUNILENBQ0osQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJRSxNQUFNLENBQUNOLE1BQUQsQ0FBUyxpREFDWCxHQUFJLDBCQUNBLEtBQUtILFNBQUwsR0FBaUJJLFNBQWpCLENBQTJCRCxNQUEzQixFQUNBLEdBQUlFLENBQUFBLFdBQVcsMkJBQUcsS0FBS1AsZUFBTCxHQUF1QlcsTUFBdkIsQ0FBOEIsS0FBS1IsTUFBbkMsQ0FBSCxDQUFmLENBRkEseUJBR0EsTUFBUSxNQUFLTCxTQUFMLEdBQWlCVSxRQUFqQixDQUEwQkQsV0FBMUIsQ0FBUixDQUNILENBQ0QsTUFBT0UsS0FBUCxDQUFjLDBCQUNWLEtBQU0sSUFBSUMsQ0FBQUEsS0FBSixDQUFVRCxLQUFWLENBQU4sQ0FDSCxDQUNKLENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FDSUcsSUFBSSxDQUFDUCxNQUFELENBQVMsa0RBQ1QsR0FBSSwwQkFDQSxLQUFLSCxTQUFMLEdBQWlCSSxTQUFqQixDQUEyQkQsTUFBM0IsRUFDQSxHQUFJRSxDQUFBQSxXQUFXLDJCQUFHLEtBQUtQLGVBQUwsR0FBdUJZLElBQXZCLENBQTRCLEtBQUtULE1BQWpDLENBQUgsQ0FBZixDQUZBLHlCQUdBLE1BQVEsTUFBS0wsU0FBTCxHQUFpQlUsUUFBakIsQ0FBMEJELFdBQTFCLENBQVIsQ0FDSCxDQUNELE1BQU9FLEtBQVAsQ0FBYywwQkFDVixLQUFNLElBQUlDLENBQUFBLEtBQUosQ0FBVUQsS0FBVixDQUFOLENBQ0gsQ0FDSixDQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lJLE1BQU0sQ0FBQ1IsTUFBRCxDQUFTLGtEQUNYLEdBQUksMEJBQ0EsS0FBS0gsU0FBTCxHQUFpQkksU0FBakIsQ0FBMkJELE1BQTNCLEVBQ0EsR0FBSUUsQ0FBQUEsV0FBVywyQkFBRyxLQUFLUCxlQUFMLEdBQXVCYSxNQUF2QixDQUE4QixLQUFLVixNQUFuQyxDQUFILENBQWYsQ0FGQSx5QkFHQSxNQUFRLE1BQUtMLFNBQUwsR0FBaUJVLFFBQWpCLENBQTBCRCxXQUExQixDQUFSLENBQ0gsQ0FDRCxNQUFPRSxLQUFQLENBQWMsMEJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVVELEtBQVYsQ0FBTixDQUNILENBQ0osQ0E3RjRCLENBQWpDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEFjcXVpcmluZyBhdXRvbG9hZGVyLiAqL1xuY29uc3QgYXV0b2xvYWQgPSByZXF1aXJlKGAke3Byb2Nlc3MuZW52LkZJTEVQQVRIfS9jb3JlL2F1dG9sb2FkLmpzYCk7XG5jb25zdCBkYkZhY3RvcnkgPSBuZXcgKGF1dG9sb2FkKCdkYkZhY3RvcnknKSk7XG5cbi8qKiBDbGFzcyByZXByZXNlbnRpbmcgQ1JVRCBvcGVyYXRpb25zIHdoaWNoIHdpbGwgYmUgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nLFxuICogdXBkYXRpbmcsIGRlbGV0aW5nIGFuZCBsaXN0aW5nIHJlY29yZHMuIFRoZXNlIENSVUQgb3BlcmF0aW9ucyBhcmUgcGVyZm9tZWRcbiAqIGZvciB0aGUgc3BlY2lmaWMgbW9kZWwgYW5kIHRodXMgcXVlcnlidWlsZGVyIGlzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nXG4gKiB0aGUgcXVlcnkgYW5kIHJldHVybmluZyBpdHMgcmVzdWx0cyBiYWNrLiBUaGlzIGNsYXNzIGFsc28gaGFuZGxlcyB0aGUgdXNlIG9mXG4gKiBkcml2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBydW4gdGhlIHF1ZXJ5LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENSVURNb2RlbCB7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkcml2ZXIgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UuIFxuICAgICAqIEByZXR1cm4ge29iamVjdH0gRHJpdmVyIG9iamVjdC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGdldERyaXZlcigpIHtcbiAgICAgICAgcmV0dXJuIGRiRmFjdG9yeS5sb2FkRHJpdmVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcXVlcnlidWlsZGVyIG9iamVjdCBvZiB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLiBcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFF1ZXJ5QnVpbGRlciBvYmplY3QuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBnZXRRdWVyeUJ1aWxkZXIoKSB7XG4gICAgICAgIHJldHVybiBkYkZhY3RvcnkubG9hZFF1ZXJ5QnVpbGRlcigpO1xuICAgIH1cblxuICAgIGdldEVudGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyB0aGUgbWV0YWRhdGEgb2YgcmVzcGVjdGl2ZSBtb2RlbCBhcyBpdCB0YWtlcyBwYXJhbXMgYXMgYSBcbiAgICAgKiBwYXJhbWV0ZXIsIGdldHMgdGhlIHF1ZXJ5YnVpbGRlciBhbmQgZHJpdmVyIGluc3RhbmNlIGJ5IGludm9raW5nIGdldHRlclxuICAgICAqIGFuZCBzZXR0ZXIgZm9yIGVhY2ggb2YgdGhlbSB3aGljaCB3aWxsIGdlbmVyYXRlIHRoZSBpbnNlcnQgcXVlcnkgYW5kIFxuICAgICAqIGV4ZWN1dGUgaXQgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgXG4gICAgICovXG4gICAgY3JlYXRlKHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5nZXRFbnRpdHkoKS5zZXRFbnRpdHkocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlCdWlsZGVyKCkuY3JlYXRlKHRoaXMuZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXREcml2ZXIoKS5ydW5RdWVyeShxdWVyeVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIHRoZSBtZXRhZGF0YSBvZiByZXNwZWN0aXZlIG1vZGVsIGFzIGl0IHRha2VzIHBhcmFtcyBhcyBhIFxuICAgICAqIHBhcmFtZXRlciwgZ2V0cyB0aGUgcXVlcnlidWlsZGVyIGFuZCBkcml2ZXIgaW5zdGFuY2UgYnkgaW52b2tpbmcgZ2V0dGVyXG4gICAgICogYW5kIHNldHRlciBmb3IgZWFjaCBvZiB0aGVtIHdoaWNoIHdpbGwgZ2VuZXJhdGUgdGhlIHVwZGF0ZSBxdWVyeSBhbmQgXG4gICAgICogZXhlY3V0ZSBpdCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBcbiAgICAgKi9cbiAgICB1cGRhdGUocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmdldEVudGl0eSgpLnNldEVudGl0eShwYXJhbXMpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy5nZXRRdWVyeUJ1aWxkZXIoKS51cGRhdGUodGhpcy5lbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldERyaXZlcigpLnJ1blF1ZXJ5KHF1ZXJ5U3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgdGhlIG1ldGFkYXRhIG9mIHJlc3BlY3RpdmUgbW9kZWwgYXMgaXQgdGFrZXMgcGFyYW1zIGFzIGEgXG4gICAgICogcGFyYW1ldGVyLCBnZXRzIHRoZSBxdWVyeWJ1aWxkZXIgYW5kIGRyaXZlciBpbnN0YW5jZSBieSBpbnZva2luZyBnZXR0ZXJcbiAgICAgKiBhbmQgc2V0dGVyIGZvciBlYWNoIG9mIHRoZW0gd2hpY2ggd2lsbCBnZW5lcmF0ZSB0aGUgc2VsZWN0IHF1ZXJ5IGFuZCBcbiAgICAgKiBleGVjdXRlIGl0IHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFxuICAgICAqL1xuICAgIGxpc3QocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmdldEVudGl0eSgpLnNldEVudGl0eShwYXJhbXMpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy5nZXRRdWVyeUJ1aWxkZXIoKS5saXN0KHRoaXMuZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXREcml2ZXIoKS5ydW5RdWVyeShxdWVyeVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIHRoZSBtZXRhZGF0YSBvZiByZXNwZWN0aXZlIG1vZGVsIGFzIGl0IHRha2VzIHBhcmFtcyBhcyBhIFxuICAgICAqIHBhcmFtZXRlciwgZ2V0cyB0aGUgcXVlcnlidWlsZGVyIGFuZCBkcml2ZXIgaW5zdGFuY2UgYnkgaW52b2tpbmcgZ2V0dGVyXG4gICAgICogYW5kIHNldHRlciBmb3IgZWFjaCBvZiB0aGVtIHdoaWNoIHdpbGwgZ2VuZXJhdGUgdGhlIGRlbGV0ZSBxdWVyeSBhbmQgXG4gICAgICogZXhlY3V0ZSBpdCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBcbiAgICAgKi9cbiAgICBkZWxldGUocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmdldEVudGl0eSgpLnNldEVudGl0eShwYXJhbXMpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy5nZXRRdWVyeUJ1aWxkZXIoKS5kZWxldGUodGhpcy5lbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldERyaXZlcigpLnJ1blF1ZXJ5KHF1ZXJ5U3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==