function cov_15hwwrmo54(){var path="/home/eiman.waheed/Desktop/mvc-node/core/models/database/driver/mysqli/driver.js";var hash="8968bf595ad21c81fe9272a085d58dabe22bad2b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/models/database/driver/mysqli/driver.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:35}},"1":{start:{line:9,column:0},end:{line:54,column:1}},"2":{start:{line:12,column:8},end:{line:17,column:11}},"3":{start:{line:25,column:8},end:{line:27,column:9}},"4":{start:{line:26,column:12},end:{line:26,column:43}},"5":{start:{line:28,column:8},end:{line:28,column:31}},"6":{start:{line:36,column:8},end:{line:36,column:31}},"7":{start:{line:46,column:8},end:{line:52,column:9}},"8":{start:{line:47,column:31},end:{line:47,column:51}},"9":{start:{line:48,column:12},end:{line:48,column:49}},"10":{start:{line:51,column:12},end:{line:51,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:18},end:{line:18,column:5}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:25},end:{line:29,column:5}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:20},end:{line:37,column:5}},line:35},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:26},end:{line:53,column:5}},line:45}},branchMap:{"0":{loc:{start:{line:25,column:8},end:{line:27,column:9}},type:"if",locations:[{start:{line:25,column:8},end:{line:27,column:9}},{start:{line:25,column:8},end:{line:27,column:9}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8968bf595ad21c81fe9272a085d58dabe22bad2b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_15hwwrmo54=function(){return actualCoverage;};}return actualCoverage;}cov_15hwwrmo54();const mySql=(cov_15hwwrmo54().s[0]++,require("sync-mysql"));/** Class representing the driver for the database connection, for the purpose of setting the database connection
* of the required database. It has the significance of building the connection specifying all the parameters required
* to build the connection. Since, no multiple database connections can be made after we have instance of a required
* database so the instance of this class is made singleton using Singleton Design Pattern. Furthermore, this class is 
* responsible for running the query after building the connection. 
*/cov_15hwwrmo54().s[1]++;module.exports=class Driver{constructor(){cov_15hwwrmo54().f[0]++;cov_15hwwrmo54().s[2]++;this.connection=new mySql({host:"localhost",user:"root",password:"123",database:"Master_MVC"});}/**
     * Get the singleton instance of the Driver class.
     * @returns {Object} The Driver instance.
     */static getInstance(){cov_15hwwrmo54().f[1]++;cov_15hwwrmo54().s[3]++;if(!Driver.instance){cov_15hwwrmo54().b[0][0]++;cov_15hwwrmo54().s[4]++;Driver.instance=new Driver();}else{cov_15hwwrmo54().b[0][1]++;}cov_15hwwrmo54().s[5]++;return Driver.instance;}/**
     * Get the connection string.
     * @returns {string} The connection string.
     */getConnection(){cov_15hwwrmo54().f[2]++;cov_15hwwrmo54().s[6]++;return this.connection;}/**
     * Runs the query which is specified as a querystring in the param of the method
     * and returns the result of the executed query.
     * @param {string} queryString 
     * @returns {Object} The query result.
     */runQuery(queryString){cov_15hwwrmo54().f[3]++;cov_15hwwrmo54().s[7]++;try{const connection=(cov_15hwwrmo54().s[8]++,this.getConnection());cov_15hwwrmo54().s[9]++;return connection.query(queryString);}catch(error){cov_15hwwrmo54().s[10]++;throw new Error(error);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyaXZlci5qcyJdLCJuYW1lcyI6WyJteVNxbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiRHJpdmVyIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uIiwiaG9zdCIsInVzZXIiLCJwYXNzd29yZCIsImRhdGFiYXNlIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsImdldENvbm5lY3Rpb24iLCJydW5RdWVyeSIsInF1ZXJ5U3RyaW5nIiwicXVlcnkiLCJlcnJvciIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOGtFQWVZOzJGQWZaLEtBQU1BLENBQUFBLEtBQUssMEJBQUdDLE9BQU8sQ0FBQyxZQUFELENBQVYsQ0FBWCxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFLHdCQUNBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsS0FBTUMsQ0FBQUEsTUFBTyxDQUUxQkMsV0FBVyxFQUFHLGlEQUNWLEtBQUtDLFVBQUwsQ0FBa0IsR0FBSU4sQ0FBQUEsS0FBSixDQUFVLENBQ3hCTyxJQUFJLENBQUUsV0FEa0IsQ0FFeEJDLElBQUksQ0FBRSxNQUZrQixDQUd4QkMsUUFBUSxDQUFFLEtBSGMsQ0FJeEJDLFFBQVEsQ0FBRSxZQUpjLENBQVYsQ0FBbEIsQ0FNSCxDQUVEO0FBQ0o7QUFDQTtBQUNBLE9BQ3NCLE1BQVhDLENBQUFBLFdBQVcsRUFBRyxpREFDakIsR0FBSSxDQUFDUCxNQUFNLENBQUNRLFFBQVosQ0FBc0Isb0RBQ2xCUixNQUFNLENBQUNRLFFBQVAsQ0FBa0IsR0FBSVIsQ0FBQUEsTUFBSixFQUFsQixDQUNILENBRkQsaUNBRGlCLHdCQUlqQixNQUFPQSxDQUFBQSxNQUFNLENBQUNRLFFBQWQsQ0FDSCxDQUVEO0FBQ0o7QUFDQTtBQUNBLE9BQ0lDLGFBQWEsRUFBRyxpREFDWixNQUFPLE1BQUtQLFVBQVosQ0FDSCxDQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJUSxRQUFRLENBQUNDLFdBQUQsQ0FBYyxpREFDbEIsR0FBSSxDQUNBLEtBQU1ULENBQUFBLFVBQVUsMEJBQUcsS0FBS08sYUFBTCxFQUFILENBQWhCLENBREEsd0JBRUEsTUFBT1AsQ0FBQUEsVUFBVSxDQUFDVSxLQUFYLENBQWlCRCxXQUFqQixDQUFQLENBQ0gsQ0FDRCxNQUFPRSxLQUFQLENBQWMsMEJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVVELEtBQVYsQ0FBTixDQUNILENBQ0osQ0E1Q3lCLENBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbXlTcWwgPSByZXF1aXJlKFwic3luYy1teXNxbFwiKTtcblxuLyoqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgZHJpdmVyIGZvciB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiwgZm9yIHRoZSBwdXJwb3NlIG9mIHNldHRpbmcgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiogb2YgdGhlIHJlcXVpcmVkIGRhdGFiYXNlLiBJdCBoYXMgdGhlIHNpZ25pZmljYW5jZSBvZiBidWlsZGluZyB0aGUgY29ubmVjdGlvbiBzcGVjaWZ5aW5nIGFsbCB0aGUgcGFyYW1ldGVycyByZXF1aXJlZFxuKiB0byBidWlsZCB0aGUgY29ubmVjdGlvbi4gU2luY2UsIG5vIG11bHRpcGxlIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGNhbiBiZSBtYWRlIGFmdGVyIHdlIGhhdmUgaW5zdGFuY2Ugb2YgYSByZXF1aXJlZFxuKiBkYXRhYmFzZSBzbyB0aGUgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBpcyBtYWRlIHNpbmdsZXRvbiB1c2luZyBTaW5nbGV0b24gRGVzaWduIFBhdHRlcm4uIEZ1cnRoZXJtb3JlLCB0aGlzIGNsYXNzIGlzIFxuKiByZXNwb25zaWJsZSBmb3IgcnVubmluZyB0aGUgcXVlcnkgYWZ0ZXIgYnVpbGRpbmcgdGhlIGNvbm5lY3Rpb24uIFxuKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRHJpdmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgbXlTcWwoe1xuICAgICAgICAgICAgaG9zdDogXCJsb2NhbGhvc3RcIixcbiAgICAgICAgICAgIHVzZXI6IFwicm9vdFwiLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IFwiMTIzXCIsXG4gICAgICAgICAgICBkYXRhYmFzZTogXCJNYXN0ZXJfTVZDXCIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBEcml2ZXIgY2xhc3MuXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIERyaXZlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghRHJpdmVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICBEcml2ZXIuaW5zdGFuY2UgPSBuZXcgRHJpdmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERyaXZlci5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbm5lY3Rpb24gc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb25uZWN0aW9uIHN0cmluZy5cbiAgICAgKi9cbiAgICBnZXRDb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIHF1ZXJ5IHdoaWNoIGlzIHNwZWNpZmllZCBhcyBhIHF1ZXJ5c3RyaW5nIGluIHRoZSBwYXJhbSBvZiB0aGUgbWV0aG9kXG4gICAgICogYW5kIHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgZXhlY3V0ZWQgcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U3RyaW5nIFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBxdWVyeSByZXN1bHQuXG4gICAgICovXG4gICAgcnVuUXVlcnkocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmdldENvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnF1ZXJ5KHF1ZXJ5U3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59Il19