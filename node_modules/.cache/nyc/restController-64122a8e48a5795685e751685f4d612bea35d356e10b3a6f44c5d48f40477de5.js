function cov_yoc5fyu6e(){var path="/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js";var hash="ba09c823f8b0f879fc6bb3abf5329e10ce3555c0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:68}},"1":{start:{line:3,column:24},end:{line:3,column:57}},"2":{start:{line:4,column:20},end:{line:4,column:49}},"3":{start:{line:13,column:0},end:{line:158,column:1}},"4":{start:{line:20,column:8},end:{line:20,column:76}},"5":{start:{line:30,column:8},end:{line:30,column:64}},"6":{start:{line:42,column:8},end:{line:52,column:9}},"7":{start:{line:43,column:27},end:{line:43,column:54}},"8":{start:{line:44,column:12},end:{line:47,column:13}},"9":{start:{line:45,column:33},end:{line:45,column:62}},"10":{start:{line:46,column:16},end:{line:46,column:40}},"11":{start:{line:48,column:12},end:{line:48,column:60}},"12":{start:{line:51,column:12},end:{line:51,column:35}},"13":{start:{line:65,column:8},end:{line:75,column:9}},"14":{start:{line:66,column:27},end:{line:66,column:54}},"15":{start:{line:67,column:12},end:{line:70,column:13}},"16":{start:{line:68,column:33},end:{line:68,column:62}},"17":{start:{line:69,column:16},end:{line:69,column:40}},"18":{start:{line:71,column:12},end:{line:71,column:60}},"19":{start:{line:74,column:12},end:{line:74,column:35}},"20":{start:{line:88,column:8},end:{line:97,column:9}},"21":{start:{line:89,column:27},end:{line:89,column:54}},"22":{start:{line:90,column:29},end:{line:90,column:58}},"23":{start:{line:91,column:25},end:{line:91,column:46}},"24":{start:{line:92,column:12},end:{line:92,column:40}},"25":{start:{line:93,column:12},end:{line:93,column:69}},"26":{start:{line:96,column:12},end:{line:96,column:35}},"27":{start:{line:111,column:8},end:{line:121,column:9}},"28":{start:{line:112,column:27},end:{line:112,column:54}},"29":{start:{line:113,column:12},end:{line:116,column:13}},"30":{start:{line:114,column:33},end:{line:114,column:62}},"31":{start:{line:115,column:16},end:{line:115,column:40}},"32":{start:{line:117,column:12},end:{line:117,column:60}},"33":{start:{line:120,column:12},end:{line:120,column:35}},"34":{start:{line:132,column:8},end:{line:137,column:9}},"35":{start:{line:133,column:12},end:{line:133,column:63}},"36":{start:{line:136,column:12},end:{line:136,column:35}},"37":{start:{line:147,column:8},end:{line:155,column:9}},"38":{start:{line:148,column:12},end:{line:150,column:13}},"39":{start:{line:149,column:16},end:{line:149,column:43}},"40":{start:{line:151,column:12},end:{line:151,column:64}},"41":{start:{line:154,column:12},end:{line:154,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:29},end:{line:21,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:40},end:{line:31,column:5}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:39},end:{line:53,column:5}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:39},end:{line:76,column:5}},line:64},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:37},end:{line:99,column:5}},line:87},"5":{name:"(anonymous_5)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:39},end:{line:122,column:5}},line:110},"6":{name:"(anonymous_6)",decl:{start:{line:131,column:4},end:{line:131,column:5}},loc:{start:{line:131,column:44},end:{line:138,column:5}},line:131},"7":{name:"(anonymous_7)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:46},end:{line:156,column:5}},line:146}},branchMap:{"0":{loc:{start:{line:44,column:12},end:{line:47,column:13}},type:"if",locations:[{start:{line:44,column:12},end:{line:47,column:13}},{start:{line:44,column:12},end:{line:47,column:13}}],line:44},"1":{loc:{start:{line:67,column:12},end:{line:70,column:13}},type:"if",locations:[{start:{line:67,column:12},end:{line:70,column:13}},{start:{line:67,column:12},end:{line:70,column:13}}],line:67},"2":{loc:{start:{line:113,column:12},end:{line:116,column:13}},type:"if",locations:[{start:{line:113,column:12},end:{line:116,column:13}},{start:{line:113,column:12},end:{line:116,column:13}}],line:113},"3":{loc:{start:{line:148,column:12},end:{line:150,column:13}},type:"if",locations:[{start:{line:148,column:12},end:{line:150,column:13}},{start:{line:148,column:12},end:{line:150,column:13}}],line:148}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ba09c823f8b0f879fc6bb3abf5329e10ce3555c0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yoc5fyu6e=function(){return actualCoverage;};}return actualCoverage;}cov_yoc5fyu6e();/** Acquiring autoloader. */const autoload=(cov_yoc5fyu6e().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const requestInstance=(cov_yoc5fyu6e().s[1]++,autoload('request').getInstance());const viewManager=(cov_yoc5fyu6e().s[2]++,new(autoload('viewManager'))());/** Class representing CRUD operations which will be responsible for generating 
 * model object and returning the views for create, delete, list , update and default. 
 * These CRUD operations are perfomed for the specific controller and thus 
 * it generates the model object specified in each of these CRUD operations.
 * This class is also responsible for returning all the views for the specified 
 * controller and action.
 */cov_yoc5fyu6e().s[3]++;module.exports=class RestController{/**
     * Get the desired model.
     * @param {string} controllerName 
     */getModel(controllerName){cov_yoc5fyu6e().f[0]++;cov_yoc5fyu6e().s[4]++;return new(autoload('modelFactory'))().createModel(controllerName);}/**
     * Get the desired view.
     * @param {string} controllerName 
     * @param {string} actionName 
     */getView(controllerName,actionName){cov_yoc5fyu6e().f[1]++;cov_yoc5fyu6e().s[5]++;return viewManager.loadView(controllerName,actionName);}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * create in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */create(controllerName,actionName){cov_yoc5fyu6e().f[2]++;cov_yoc5fyu6e().s[6]++;try{const params=(cov_yoc5fyu6e().s[7]++,requestInstance.getParams());cov_yoc5fyu6e().s[8]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[0][0]++;const modelObj=(cov_yoc5fyu6e().s[9]++,this.getModel(controllerName));cov_yoc5fyu6e().s[10]++;modelObj.create(params);}else{cov_yoc5fyu6e().b[0][1]++;}cov_yoc5fyu6e().s[11]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[12]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * update in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */update(controllerName,actionName){cov_yoc5fyu6e().f[3]++;cov_yoc5fyu6e().s[13]++;try{const params=(cov_yoc5fyu6e().s[14]++,requestInstance.getParams());cov_yoc5fyu6e().s[15]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[1][0]++;const modelObj=(cov_yoc5fyu6e().s[16]++,this.getModel(controllerName));cov_yoc5fyu6e().s[17]++;modelObj.update(params);}else{cov_yoc5fyu6e().b[1][1]++;}cov_yoc5fyu6e().s[18]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[19]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * list in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */list(controllerName,actionName){cov_yoc5fyu6e().f[4]++;cov_yoc5fyu6e().s[20]++;try{const params=(cov_yoc5fyu6e().s[21]++,requestInstance.getParams());const modelObj=(cov_yoc5fyu6e().s[22]++,this.getModel(controllerName));let result=(cov_yoc5fyu6e().s[23]++,modelObj.list(params));cov_yoc5fyu6e().s[24]++;viewManager.setData(result);cov_yoc5fyu6e().s[25]++;return this.getView(controllerName,`${actionName}Data`);}catch(error){cov_yoc5fyu6e().s[26]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * delete in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */delete(controllerName,actionName){cov_yoc5fyu6e().f[5]++;cov_yoc5fyu6e().s[27]++;try{const params=(cov_yoc5fyu6e().s[28]++,requestInstance.getParams());cov_yoc5fyu6e().s[29]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[2][0]++;const modelObj=(cov_yoc5fyu6e().s[30]++,this.getModel(controllerName));cov_yoc5fyu6e().s[31]++;modelObj.delete(params);}else{cov_yoc5fyu6e().b[2][1]++;}cov_yoc5fyu6e().s[32]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[33]++;throw new Error(error);}}/**
     * Loads the view for the default case for each of the controller i.e.,
     * student, teacher and course. It decides the viewing of default view on 
     * the grounds of controller name and action which are received as params
     * of the method.
     * @param {string} controllerName 
     */defaultView(controllerName,actionName){cov_yoc5fyu6e().f[6]++;cov_yoc5fyu6e().s[34]++;try{cov_yoc5fyu6e().s[35]++;return this.getView(controllerName,'defaultView');}catch(error){cov_yoc5fyu6e().s[36]++;throw new Error(error);}}/**
     * Dynamically calls the action specified in the params of the method. It
     * decides which CRUD operation to call for the controller and thus invokes
     * the CRUD operation by dynamically making the function call.
     * @param {string} controllerName 
     */performAction(controllerName,actionName){cov_yoc5fyu6e().f[7]++;cov_yoc5fyu6e().s[37]++;try{cov_yoc5fyu6e().s[38]++;if(!actionName){cov_yoc5fyu6e().b[3][0]++;cov_yoc5fyu6e().s[39]++;actionName='defaultView';}else{cov_yoc5fyu6e().b[3][1]++;}cov_yoc5fyu6e().s[40]++;return this[actionName](controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[41]++;throw new Error(error);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,