function cov_gbac6s6vx(){var path="/home/eiman.waheed/Desktop/mvc-node/core/models/database/driver/mysqli/queryBuilder.js";var hash="fd5545b18d55de4691d6eefce775d871d0126b54";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/models/database/driver/mysqli/queryBuilder.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:68}},"1":{start:{line:11,column:0},end:{line:78,column:1}},"2":{start:{line:22,column:24},end:{line:22,column:26}},"3":{start:{line:22,column:42},end:{line:22,column:44}},"4":{start:{line:23,column:8},end:{line:28,column:9}},"5":{start:{line:24,column:12},end:{line:27,column:13}},"6":{start:{line:25,column:16},end:{line:25,column:39}},"7":{start:{line:26,column:16},end:{line:26,column:61}},"8":{start:{line:29,column:8},end:{line:29,column:65}},"9":{start:{line:30,column:8},end:{line:30,column:71}},"10":{start:{line:31,column:8},end:{line:31,column:90}},"11":{start:{line:43,column:24},end:{line:43,column:26}},"12":{start:{line:44,column:26},end:{line:44,column:50}},"13":{start:{line:45,column:8},end:{line:49,column:9}},"14":{start:{line:46,column:12},end:{line:48,column:13}},"15":{start:{line:47,column:16},end:{line:47,column:71}},"16":{start:{line:50,column:8},end:{line:50,column:65}},"17":{start:{line:51,column:8},end:{line:51,column:87}},"18":{start:{line:63,column:26},end:{line:63,column:50}},"19":{start:{line:64,column:8},end:{line:64,column:77}},"20":{start:{line:76,column:8},end:{line:76,column:53}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:19},end:{line:32,column:5}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:19},end:{line:52,column:5}},line:42},"2":{name:"(anonymous_2)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:19},end:{line:65,column:5}},line:62},"3":{name:"(anonymous_3)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:17},end:{line:77,column:5}},line:75}},branchMap:{"0":{loc:{start:{line:24,column:12},end:{line:27,column:13}},type:"if",locations:[{start:{line:24,column:12},end:{line:27,column:13}},{start:{line:24,column:12},end:{line:27,column:13}}],line:24},"1":{loc:{start:{line:24,column:16},end:{line:24,column:49}},type:"binary-expr",locations:[{start:{line:24,column:16},end:{line:24,column:34}},{start:{line:24,column:38},end:{line:24,column:49}}],line:24},"2":{loc:{start:{line:46,column:12},end:{line:48,column:13}},type:"if",locations:[{start:{line:46,column:12},end:{line:48,column:13}},{start:{line:46,column:12},end:{line:48,column:13}}],line:46}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fd5545b18d55de4691d6eefce775d871d0126b54"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_gbac6s6vx=function(){return actualCoverage;};}return actualCoverage;}cov_gbac6s6vx();const autoload=(cov_gbac6s6vx().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));/**
 * Class representing CRUD operations which will be responsible for generating 
 * sql queries and returning them for all the CRUD operations i.e, create, delete,
 * list and update. These CRUD operations are performed for the specific entity which
 * has key value pair. After these queries are generated dynamically, they are returned.
 * This class is responsible for generating and building the queries dynamically for
 * the purpose of further executing it.
 */cov_gbac6s6vx().s[1]++;module.exports=class QueryBuilder{/**
     * Forms the insert sql query for inserting records in database. The query is
     * generated by making the strings of keys and values which are obtained from the
     * entity object which is passed as a parameter in the method. After the insert query
     * is generated then it is returned which will be executed later.
     * @param {Object} entity 
     * @returns {string} the sql query.
     */create(entity){cov_gbac6s6vx().f[0]++;let keyString=(cov_gbac6s6vx().s[2]++,""),valueString=(cov_gbac6s6vx().s[3]++,"");cov_gbac6s6vx().s[4]++;for(const key in entity){cov_gbac6s6vx().s[5]++;if((cov_gbac6s6vx().b[1][0]++,key!='tableName')&&(cov_gbac6s6vx().b[1][1]++,key!='id')){cov_gbac6s6vx().b[0][0]++;cov_gbac6s6vx().s[6]++;keyString+=key+',';cov_gbac6s6vx().s[7]++;valueString+="'"+entity[key]+"'"+',';}else{cov_gbac6s6vx().b[0][1]++;}}cov_gbac6s6vx().s[8]++;keyString=keyString.substring(0,keyString.length-1);cov_gbac6s6vx().s[9]++;valueString=valueString.substring(0,valueString.length-1);cov_gbac6s6vx().s[10]++;return`INSERT INTO ${entity.tableName} (${keyString}) VALUES (${valueString})`;}/**
    * Forms the update sql query for updating records of database. The query is
    * generated by making the strings of keys and values which are obtained from the
    * entity object which is passed as a parameter in the method. After the update query
    * is generated then it is returned which will be executed later.
    * @param {Object} entity 
    * @returns {string} the sql query.
    */update(entity){cov_gbac6s6vx().f[1]++;let keyString=(cov_gbac6s6vx().s[11]++,"");let valueString=(cov_gbac6s6vx().s[12]++,"'"+entity['id']+"'");cov_gbac6s6vx().s[13]++;for(const key in entity){cov_gbac6s6vx().s[14]++;if(key!='tableName'){cov_gbac6s6vx().b[2][0]++;cov_gbac6s6vx().s[15]++;keyString+=key+'='+"'"+entity[key]+"'"+',';}else{cov_gbac6s6vx().b[2][1]++;}}cov_gbac6s6vx().s[16]++;keyString=keyString.substring(0,keyString.length-1);cov_gbac6s6vx().s[17]++;return`UPDATE ${entity.tableName} SET ${keyString} WHERE id=${valueString}`;}/**
    * Forms the delete sql query for deleting records from database based on the id column. 
    * The query is generated by making the strings of keys and values which are obtained 
    * from the entity object which is passed as a parameter in the method. After the delete 
    * query is generated then it is returned which will be executed later.
    * @param {Object} entity 
    * @returns {string} the sql query.
    */delete(entity){cov_gbac6s6vx().f[2]++;let valueString=(cov_gbac6s6vx().s[18]++,"'"+entity['id']+"'");cov_gbac6s6vx().s[19]++;return`DELETE FROM ${entity.tableName} WHERE id=(${valueString})`;}/**
    * Forms the select sql query for fetching all the records from database. 
    * The query is generated by taking the table name which is obtained from the entity object 
    * which is passed as a parameter in the method. After the select query is generated then it 
    * is returned which will be executed later.
    * @param {object} entity 
    * @returns {string} the sql query.
    */list(entity){cov_gbac6s6vx().f[3]++;cov_gbac6s6vx().s[20]++;return`SELECT * FROM ${entity.tableName}`;}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5QnVpbGRlci5qcyJdLCJuYW1lcyI6WyJhdXRvbG9hZCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiRklMRVBBVEgiLCJtb2R1bGUiLCJleHBvcnRzIiwiUXVlcnlCdWlsZGVyIiwiY3JlYXRlIiwiZW50aXR5Iiwia2V5U3RyaW5nIiwidmFsdWVTdHJpbmciLCJrZXkiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJ0YWJsZU5hbWUiLCJ1cGRhdGUiLCJkZWxldGUiLCJsaXN0Il0sIm1hcHBpbmdzIjoiaW9HQWVZO3lGQWZaLEtBQU1BLENBQUFBLFFBQVEseUJBQUdDLE9BQU8sQ0FBRSxHQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBUyxtQkFBekIsQ0FBVixDQUFkLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHLHVCQUNBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsS0FBTUMsQ0FBQUEsWUFBYSxDQUVoQztBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0lDLE1BQU0sQ0FBQ0MsTUFBRCxDQUFTLHdCQUNYLEdBQUlDLENBQUFBLFNBQVMseUJBQUcsRUFBSCxDQUFiLENBQW9CQyxXQUFXLHlCQUFHLEVBQUgsQ0FBL0IsQ0FEVyx1QkFFWCxJQUFLLEtBQU1DLENBQUFBLEdBQVgsR0FBa0JILENBQUFBLE1BQWxCLENBQTBCLHdCQUN0QixHQUFJLDJCQUFBRyxHQUFHLEVBQUksV0FBUCw4QkFBc0JBLEdBQUcsRUFBSSxJQUE3QixDQUFKLENBQXVDLGtEQUNuQ0YsU0FBUyxFQUFJRSxHQUFHLENBQUcsR0FBbkIsQ0FEbUMsdUJBRW5DRCxXQUFXLEVBQUksSUFBTUYsTUFBTSxDQUFDRyxHQUFELENBQVosQ0FBb0IsR0FBcEIsQ0FBMEIsR0FBekMsQ0FDSCxDQUhELGdDQUlILENBUFUsdUJBUVhGLFNBQVMsQ0FBR0EsU0FBUyxDQUFDRyxTQUFWLENBQW9CLENBQXBCLENBQXVCSCxTQUFTLENBQUNJLE1BQVYsQ0FBbUIsQ0FBMUMsQ0FBWixDQVJXLHVCQVNYSCxXQUFXLENBQUdBLFdBQVcsQ0FBQ0UsU0FBWixDQUFzQixDQUF0QixDQUF5QkYsV0FBVyxDQUFDRyxNQUFaLENBQXFCLENBQTlDLENBQWQsQ0FUVyx3QkFVWCxNQUFTLGVBQWNMLE1BQU0sQ0FBQ00sU0FBVSxLQUFJTCxTQUFVLGFBQVlDLFdBQVksR0FBOUUsQ0FDSCxDQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFDSUssTUFBTSxDQUFDUCxNQUFELENBQVMsd0JBQ1gsR0FBSUMsQ0FBQUEsU0FBUywwQkFBRyxFQUFILENBQWIsQ0FDQSxHQUFJQyxDQUFBQSxXQUFXLDBCQUFHLElBQU1GLE1BQU0sQ0FBQyxJQUFELENBQVosQ0FBcUIsR0FBeEIsQ0FBZixDQUZXLHdCQUdYLElBQUssS0FBTUcsQ0FBQUEsR0FBWCxHQUFrQkgsQ0FBQUEsTUFBbEIsQ0FBMEIseUJBQ3RCLEdBQUlHLEdBQUcsRUFBSSxXQUFYLENBQXdCLG1EQUNwQkYsU0FBUyxFQUFJRSxHQUFHLENBQUcsR0FBTixDQUFZLEdBQVosQ0FBa0JILE1BQU0sQ0FBQ0csR0FBRCxDQUF4QixDQUFnQyxHQUFoQyxDQUFzQyxHQUFuRCxDQUNILENBRkQsZ0NBR0gsQ0FQVSx3QkFRWEYsU0FBUyxDQUFHQSxTQUFTLENBQUNHLFNBQVYsQ0FBb0IsQ0FBcEIsQ0FBdUJILFNBQVMsQ0FBQ0ksTUFBVixDQUFtQixDQUExQyxDQUFaLENBUlcsd0JBU1gsTUFBUyxVQUFTTCxNQUFNLENBQUNNLFNBQVUsUUFBT0wsU0FBVSxhQUFZQyxXQUFZLEVBQTVFLENBQ0gsQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQ0lNLE1BQU0sQ0FBQ1IsTUFBRCxDQUFTLHdCQUNYLEdBQUlFLENBQUFBLFdBQVcsMEJBQUcsSUFBTUYsTUFBTSxDQUFDLElBQUQsQ0FBWixDQUFxQixHQUF4QixDQUFmLENBRFcsd0JBRVgsTUFBUyxlQUFjQSxNQUFNLENBQUNNLFNBQVUsY0FBYUosV0FBWSxHQUFqRSxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUNJTyxJQUFJLENBQUNULE1BQUQsQ0FBUyxnREFDVCxNQUFTLGlCQUFnQkEsTUFBTSxDQUFDTSxTQUFVLEVBQTFDLENBQ0gsQ0FsRStCLENBQXBDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXV0b2xvYWQgPSByZXF1aXJlKGAke3Byb2Nlc3MuZW52LkZJTEVQQVRIfS9jb3JlL2F1dG9sb2FkLmpzYCk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIENSVUQgb3BlcmF0aW9ucyB3aGljaCB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIFxuICogc3FsIHF1ZXJpZXMgYW5kIHJldHVybmluZyB0aGVtIGZvciBhbGwgdGhlIENSVUQgb3BlcmF0aW9ucyBpLmUsIGNyZWF0ZSwgZGVsZXRlLFxuICogbGlzdCBhbmQgdXBkYXRlLiBUaGVzZSBDUlVEIG9wZXJhdGlvbnMgYXJlIHBlcmZvcm1lZCBmb3IgdGhlIHNwZWNpZmljIGVudGl0eSB3aGljaFxuICogaGFzIGtleSB2YWx1ZSBwYWlyLiBBZnRlciB0aGVzZSBxdWVyaWVzIGFyZSBnZW5lcmF0ZWQgZHluYW1pY2FsbHksIHRoZXkgYXJlIHJldHVybmVkLlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBhbmQgYnVpbGRpbmcgdGhlIHF1ZXJpZXMgZHluYW1pY2FsbHkgZm9yXG4gKiB0aGUgcHVycG9zZSBvZiBmdXJ0aGVyIGV4ZWN1dGluZyBpdC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBRdWVyeUJ1aWxkZXIge1xuXG4gICAgLyoqXG4gICAgICogRm9ybXMgdGhlIGluc2VydCBzcWwgcXVlcnkgZm9yIGluc2VydGluZyByZWNvcmRzIGluIGRhdGFiYXNlLiBUaGUgcXVlcnkgaXNcbiAgICAgKiBnZW5lcmF0ZWQgYnkgbWFraW5nIHRoZSBzdHJpbmdzIG9mIGtleXMgYW5kIHZhbHVlcyB3aGljaCBhcmUgb2J0YWluZWQgZnJvbSB0aGVcbiAgICAgKiBlbnRpdHkgb2JqZWN0IHdoaWNoIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUgbWV0aG9kLiBBZnRlciB0aGUgaW5zZXJ0IHF1ZXJ5XG4gICAgICogaXMgZ2VuZXJhdGVkIHRoZW4gaXQgaXMgcmV0dXJuZWQgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBsYXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZW50aXR5IFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBzcWwgcXVlcnkuXG4gICAgICovXG4gICAgY3JlYXRlKGVudGl0eSkge1xuICAgICAgICBsZXQga2V5U3RyaW5nID0gXCJcIiwgdmFsdWVTdHJpbmcgPSBcIlwiO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBlbnRpdHkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT0gJ3RhYmxlTmFtZScgJiYga2V5ICE9ICdpZCcpIHtcbiAgICAgICAgICAgICAgICBrZXlTdHJpbmcgKz0ga2V5ICsgJywnO1xuICAgICAgICAgICAgICAgIHZhbHVlU3RyaW5nICs9IFwiJ1wiICsgZW50aXR5W2tleV0gKyBcIidcIiArICcsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlTdHJpbmcgPSBrZXlTdHJpbmcuc3Vic3RyaW5nKDAsIGtleVN0cmluZy5sZW5ndGggLSAxKTtcbiAgICAgICAgdmFsdWVTdHJpbmcgPSB2YWx1ZVN0cmluZy5zdWJzdHJpbmcoMCwgdmFsdWVTdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiAoYElOU0VSVCBJTlRPICR7ZW50aXR5LnRhYmxlTmFtZX0gKCR7a2V5U3RyaW5nfSkgVkFMVUVTICgke3ZhbHVlU3RyaW5nfSlgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZvcm1zIHRoZSB1cGRhdGUgc3FsIHF1ZXJ5IGZvciB1cGRhdGluZyByZWNvcmRzIG9mIGRhdGFiYXNlLiBUaGUgcXVlcnkgaXNcbiAgICAqIGdlbmVyYXRlZCBieSBtYWtpbmcgdGhlIHN0cmluZ3Mgb2Yga2V5cyBhbmQgdmFsdWVzIHdoaWNoIGFyZSBvYnRhaW5lZCBmcm9tIHRoZVxuICAgICogZW50aXR5IG9iamVjdCB3aGljaCBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlIG1ldGhvZC4gQWZ0ZXIgdGhlIHVwZGF0ZSBxdWVyeVxuICAgICogaXMgZ2VuZXJhdGVkIHRoZW4gaXQgaXMgcmV0dXJuZWQgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBsYXRlci5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRpdHkgXG4gICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgc3FsIHF1ZXJ5LlxuICAgICovXG4gICAgdXBkYXRlKGVudGl0eSkge1xuICAgICAgICBsZXQga2V5U3RyaW5nID0gXCJcIjtcbiAgICAgICAgbGV0IHZhbHVlU3RyaW5nID0gXCInXCIgKyBlbnRpdHlbJ2lkJ10gKyBcIidcIjtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZW50aXR5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9ICd0YWJsZU5hbWUnKSB7XG4gICAgICAgICAgICAgICAga2V5U3RyaW5nICs9IGtleSArICc9JyArIFwiJ1wiICsgZW50aXR5W2tleV0gKyBcIidcIiArICcsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlTdHJpbmcgPSBrZXlTdHJpbmcuc3Vic3RyaW5nKDAsIGtleVN0cmluZy5sZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIChgVVBEQVRFICR7ZW50aXR5LnRhYmxlTmFtZX0gU0VUICR7a2V5U3RyaW5nfSBXSEVSRSBpZD0ke3ZhbHVlU3RyaW5nfWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRm9ybXMgdGhlIGRlbGV0ZSBzcWwgcXVlcnkgZm9yIGRlbGV0aW5nIHJlY29yZHMgZnJvbSBkYXRhYmFzZSBiYXNlZCBvbiB0aGUgaWQgY29sdW1uLiBcbiAgICAqIFRoZSBxdWVyeSBpcyBnZW5lcmF0ZWQgYnkgbWFraW5nIHRoZSBzdHJpbmdzIG9mIGtleXMgYW5kIHZhbHVlcyB3aGljaCBhcmUgb2J0YWluZWQgXG4gICAgKiBmcm9tIHRoZSBlbnRpdHkgb2JqZWN0IHdoaWNoIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUgbWV0aG9kLiBBZnRlciB0aGUgZGVsZXRlIFxuICAgICogcXVlcnkgaXMgZ2VuZXJhdGVkIHRoZW4gaXQgaXMgcmV0dXJuZWQgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBsYXRlci5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRpdHkgXG4gICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgc3FsIHF1ZXJ5LlxuICAgICovXG4gICAgZGVsZXRlKGVudGl0eSkge1xuICAgICAgICBsZXQgdmFsdWVTdHJpbmcgPSBcIidcIiArIGVudGl0eVsnaWQnXSArIFwiJ1wiO1xuICAgICAgICByZXR1cm4gKGBERUxFVEUgRlJPTSAke2VudGl0eS50YWJsZU5hbWV9IFdIRVJFIGlkPSgke3ZhbHVlU3RyaW5nfSlgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZvcm1zIHRoZSBzZWxlY3Qgc3FsIHF1ZXJ5IGZvciBmZXRjaGluZyBhbGwgdGhlIHJlY29yZHMgZnJvbSBkYXRhYmFzZS4gXG4gICAgKiBUaGUgcXVlcnkgaXMgZ2VuZXJhdGVkIGJ5IHRha2luZyB0aGUgdGFibGUgbmFtZSB3aGljaCBpcyBvYnRhaW5lZCBmcm9tIHRoZSBlbnRpdHkgb2JqZWN0IFxuICAgICogd2hpY2ggaXMgcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGluIHRoZSBtZXRob2QuIEFmdGVyIHRoZSBzZWxlY3QgcXVlcnkgaXMgZ2VuZXJhdGVkIHRoZW4gaXQgXG4gICAgKiBpcyByZXR1cm5lZCB3aGljaCB3aWxsIGJlIGV4ZWN1dGVkIGxhdGVyLlxuICAgICogQHBhcmFtIHtvYmplY3R9IGVudGl0eSBcbiAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBzcWwgcXVlcnkuXG4gICAgKi9cbiAgICBsaXN0KGVudGl0eSkge1xuICAgICAgICByZXR1cm4gKGBTRUxFQ1QgKiBGUk9NICR7ZW50aXR5LnRhYmxlTmFtZX1gKTtcbiAgICB9XG59Il19