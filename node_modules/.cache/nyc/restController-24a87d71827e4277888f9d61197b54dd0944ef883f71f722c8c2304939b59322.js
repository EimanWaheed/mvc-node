function cov_yoc5fyu6e(){var path="/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js";var hash="d1a4bdf658771a962e0c8351508e91535def61bf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:68}},"1":{start:{line:2,column:24},end:{line:2,column:57}},"2":{start:{line:3,column:20},end:{line:3,column:49}},"3":{start:{line:43,column:8},end:{line:53,column:9}},"4":{start:{line:44,column:27},end:{line:44,column:54}},"5":{start:{line:45,column:12},end:{line:48,column:13}},"6":{start:{line:46,column:33},end:{line:46,column:62}},"7":{start:{line:47,column:16},end:{line:47,column:40}},"8":{start:{line:49,column:12},end:{line:49,column:60}},"9":{start:{line:52,column:12},end:{line:52,column:35}},"10":{start:{line:66,column:8},end:{line:76,column:9}},"11":{start:{line:67,column:27},end:{line:67,column:54}},"12":{start:{line:68,column:12},end:{line:71,column:13}},"13":{start:{line:69,column:33},end:{line:69,column:62}},"14":{start:{line:70,column:16},end:{line:70,column:40}},"15":{start:{line:72,column:12},end:{line:72,column:60}},"16":{start:{line:75,column:12},end:{line:75,column:35}},"17":{start:{line:89,column:8},end:{line:98,column:9}},"18":{start:{line:90,column:27},end:{line:90,column:54}},"19":{start:{line:91,column:29},end:{line:91,column:58}},"20":{start:{line:92,column:25},end:{line:92,column:46}},"21":{start:{line:93,column:12},end:{line:93,column:40}},"22":{start:{line:94,column:12},end:{line:94,column:69}},"23":{start:{line:97,column:12},end:{line:97,column:35}},"24":{start:{line:112,column:8},end:{line:122,column:9}},"25":{start:{line:113,column:27},end:{line:113,column:54}},"26":{start:{line:114,column:12},end:{line:117,column:13}},"27":{start:{line:115,column:33},end:{line:115,column:62}},"28":{start:{line:116,column:16},end:{line:116,column:40}},"29":{start:{line:118,column:12},end:{line:118,column:60}},"30":{start:{line:121,column:12},end:{line:121,column:35}},"31":{start:{line:133,column:8},end:{line:138,column:9}},"32":{start:{line:134,column:12},end:{line:134,column:63}},"33":{start:{line:137,column:12},end:{line:137,column:35}},"34":{start:{line:161,column:0},end:{line:161,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:39},end:{line:54,column:5}},line:42},"1":{name:"(anonymous_1)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:39},end:{line:77,column:5}},line:65},"2":{name:"(anonymous_2)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:37},end:{line:100,column:5}},line:88},"3":{name:"(anonymous_3)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:39},end:{line:123,column:5}},line:111},"4":{name:"(anonymous_4)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:44},end:{line:139,column:5}},line:132}},branchMap:{"0":{loc:{start:{line:45,column:12},end:{line:48,column:13}},type:"if",locations:[{start:{line:45,column:12},end:{line:48,column:13}},{start:{line:45,column:12},end:{line:48,column:13}}],line:45},"1":{loc:{start:{line:68,column:12},end:{line:71,column:13}},type:"if",locations:[{start:{line:68,column:12},end:{line:71,column:13}},{start:{line:68,column:12},end:{line:71,column:13}}],line:68},"2":{loc:{start:{line:114,column:12},end:{line:117,column:13}},type:"if",locations:[{start:{line:114,column:12},end:{line:117,column:13}},{start:{line:114,column:12},end:{line:117,column:13}}],line:114}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d1a4bdf658771a962e0c8351508e91535def61bf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yoc5fyu6e=function(){return actualCoverage;};}return actualCoverage;}cov_yoc5fyu6e();const autoload=(cov_yoc5fyu6e().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const requestInstance=(cov_yoc5fyu6e().s[1]++,autoload('request').getInstance());const viewManager=(cov_yoc5fyu6e().s[2]++,new(autoload('viewManager'))());/** Class representing CRUD operations which will be responsible for generating 
 * model object and returning the views for create, delete, list , update and default. 
 * These CRUD operations are perfomed for the specific controller and thus 
 * it generates the model object specified in each of these CRUD operations.
 * This class is also responsible for returning all the views for the specified 
 * controller and action.
 */class RestController{/**
     * Get the desired model.
     * @param {string} controllerName 
     */ /* istanbul ignore next */getModel(controllerName){return new(autoload('modelFactory'))().createModel(controllerName);}/**
     * Get the desired view.
     * @param {string} controllerName 
     * @param {string} actionName 
     */ /* istanbul ignore next */getView(controllerName,actionName){return viewManager.loadView(controllerName,actionName);}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * create in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */create(controllerName,actionName){cov_yoc5fyu6e().f[0]++;cov_yoc5fyu6e().s[3]++;try{const params=(cov_yoc5fyu6e().s[4]++,requestInstance.getParams());cov_yoc5fyu6e().s[5]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[0][0]++;const modelObj=(cov_yoc5fyu6e().s[6]++,this.getModel(controllerName));cov_yoc5fyu6e().s[7]++;modelObj.create(params);}else{cov_yoc5fyu6e().b[0][1]++;}cov_yoc5fyu6e().s[8]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[9]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * update in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */update(controllerName,actionName){cov_yoc5fyu6e().f[1]++;cov_yoc5fyu6e().s[10]++;try{const params=(cov_yoc5fyu6e().s[11]++,requestInstance.getParams());cov_yoc5fyu6e().s[12]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[1][0]++;const modelObj=(cov_yoc5fyu6e().s[13]++,this.getModel(controllerName));cov_yoc5fyu6e().s[14]++;modelObj.update(params);}else{cov_yoc5fyu6e().b[1][1]++;}cov_yoc5fyu6e().s[15]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[16]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * list in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */list(controllerName,actionName){cov_yoc5fyu6e().f[2]++;cov_yoc5fyu6e().s[17]++;try{const params=(cov_yoc5fyu6e().s[18]++,requestInstance.getParams());const modelObj=(cov_yoc5fyu6e().s[19]++,this.getModel(controllerName));let result=(cov_yoc5fyu6e().s[20]++,modelObj.list(params));cov_yoc5fyu6e().s[21]++;viewManager.setData(result);cov_yoc5fyu6e().s[22]++;return this.getView(controllerName,`${actionName}Data`);}catch(error){cov_yoc5fyu6e().s[23]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * delete in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */delete(controllerName,actionName){cov_yoc5fyu6e().f[3]++;cov_yoc5fyu6e().s[24]++;try{const params=(cov_yoc5fyu6e().s[25]++,requestInstance.getParams());cov_yoc5fyu6e().s[26]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[2][0]++;const modelObj=(cov_yoc5fyu6e().s[27]++,this.getModel(controllerName));cov_yoc5fyu6e().s[28]++;modelObj.delete(params);}else{cov_yoc5fyu6e().b[2][1]++;}cov_yoc5fyu6e().s[29]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[30]++;throw new Error(error);}}/**
     * Loads the view for the default case for each of the controller i.e.,
     * student, teacher and course. It decides the viewing of default view on 
     * the grounds of controller name and action which are received as params
     * of the method.
     * @param {string} controllerName 
     */defaultView(controllerName,actionName){cov_yoc5fyu6e().f[4]++;cov_yoc5fyu6e().s[31]++;try{cov_yoc5fyu6e().s[32]++;return this.getView(controllerName,'defaultView');}catch(error){cov_yoc5fyu6e().s[33]++;throw new Error(error);}}/**
     * Dynamically calls the action specified in the params of the method. It
     * decides which CRUD operation to call for the controller and thus invokes
     * the CRUD operation by dynamically making the function call.
     * @param {string} controllerName 
     */ /* istanbul ignore next */performAction(controllerName,actionName){try{if(!actionName){actionName='defaultView';}return this[actionName](controllerName,actionName);}catch(error){throw new Error(error);}}}cov_yoc5fyu6e().s[34]++;module.exports=RestController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,