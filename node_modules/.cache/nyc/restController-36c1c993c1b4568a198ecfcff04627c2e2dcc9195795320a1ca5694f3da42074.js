function cov_yoc5fyu6e(){var path="/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js";var hash="aa3dbbc7d4bd967671c3a6be07e1975a4a8b7944";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/eiman.waheed/Desktop/mvc-node/core/controllers/restController.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:68}},"1":{start:{line:3,column:24},end:{line:3,column:57}},"2":{start:{line:4,column:20},end:{line:4,column:49}},"3":{start:{line:13,column:0},end:{line:161,column:1}},"4":{start:{line:44,column:8},end:{line:54,column:9}},"5":{start:{line:45,column:27},end:{line:45,column:54}},"6":{start:{line:46,column:12},end:{line:49,column:13}},"7":{start:{line:47,column:33},end:{line:47,column:62}},"8":{start:{line:48,column:16},end:{line:48,column:40}},"9":{start:{line:50,column:12},end:{line:50,column:60}},"10":{start:{line:53,column:12},end:{line:53,column:35}},"11":{start:{line:67,column:8},end:{line:77,column:9}},"12":{start:{line:68,column:27},end:{line:68,column:54}},"13":{start:{line:69,column:12},end:{line:72,column:13}},"14":{start:{line:70,column:33},end:{line:70,column:62}},"15":{start:{line:71,column:16},end:{line:71,column:40}},"16":{start:{line:73,column:12},end:{line:73,column:60}},"17":{start:{line:76,column:12},end:{line:76,column:35}},"18":{start:{line:90,column:8},end:{line:99,column:9}},"19":{start:{line:91,column:27},end:{line:91,column:54}},"20":{start:{line:92,column:29},end:{line:92,column:58}},"21":{start:{line:93,column:25},end:{line:93,column:46}},"22":{start:{line:94,column:12},end:{line:94,column:40}},"23":{start:{line:95,column:12},end:{line:95,column:69}},"24":{start:{line:98,column:12},end:{line:98,column:35}},"25":{start:{line:113,column:8},end:{line:123,column:9}},"26":{start:{line:114,column:27},end:{line:114,column:54}},"27":{start:{line:115,column:12},end:{line:118,column:13}},"28":{start:{line:116,column:33},end:{line:116,column:62}},"29":{start:{line:117,column:16},end:{line:117,column:40}},"30":{start:{line:119,column:12},end:{line:119,column:60}},"31":{start:{line:122,column:12},end:{line:122,column:35}},"32":{start:{line:134,column:8},end:{line:139,column:9}},"33":{start:{line:135,column:12},end:{line:135,column:63}},"34":{start:{line:138,column:12},end:{line:138,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:39},end:{line:55,column:5}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:39},end:{line:78,column:5}},line:66},"2":{name:"(anonymous_2)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:37},end:{line:101,column:5}},line:89},"3":{name:"(anonymous_3)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:39},end:{line:124,column:5}},line:112},"4":{name:"(anonymous_4)",decl:{start:{line:133,column:4},end:{line:133,column:5}},loc:{start:{line:133,column:44},end:{line:140,column:5}},line:133}},branchMap:{"0":{loc:{start:{line:46,column:12},end:{line:49,column:13}},type:"if",locations:[{start:{line:46,column:12},end:{line:49,column:13}},{start:{line:46,column:12},end:{line:49,column:13}}],line:46},"1":{loc:{start:{line:69,column:12},end:{line:72,column:13}},type:"if",locations:[{start:{line:69,column:12},end:{line:72,column:13}},{start:{line:69,column:12},end:{line:72,column:13}}],line:69},"2":{loc:{start:{line:115,column:12},end:{line:118,column:13}},type:"if",locations:[{start:{line:115,column:12},end:{line:118,column:13}},{start:{line:115,column:12},end:{line:118,column:13}}],line:115}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"aa3dbbc7d4bd967671c3a6be07e1975a4a8b7944"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yoc5fyu6e=function(){return actualCoverage;};}return actualCoverage;}cov_yoc5fyu6e();/** Acquiring autoloader. */const autoload=(cov_yoc5fyu6e().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`));const requestInstance=(cov_yoc5fyu6e().s[1]++,autoload('request').getInstance());const viewManager=(cov_yoc5fyu6e().s[2]++,new(autoload('viewManager'))());/** Class representing CRUD operations which will be responsible for generating 
 * model object and returning the views for create, delete, list , update and default. 
 * These CRUD operations are perfomed for the specific controller and thus 
 * it generates the model object specified in each of these CRUD operations.
 * This class is also responsible for returning all the views for the specified 
 * controller and action.
 */cov_yoc5fyu6e().s[3]++;module.exports=class RestController{/**
     * Get the desired model.
     * @param {string} controllerName 
     */ /* istanbul ignore next */getModel(controllerName){return new(autoload('modelFactory'))().createModel(controllerName);}/**
     * Get the desired view.
     * @param {string} controllerName 
     * @param {string} actionName 
     */ /* istanbul ignore next */getView(controllerName,actionName){return viewManager.loadView(controllerName,actionName);}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * create in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */create(controllerName,actionName){cov_yoc5fyu6e().f[0]++;cov_yoc5fyu6e().s[4]++;try{const params=(cov_yoc5fyu6e().s[5]++,requestInstance.getParams());cov_yoc5fyu6e().s[6]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[0][0]++;const modelObj=(cov_yoc5fyu6e().s[7]++,this.getModel(controllerName));cov_yoc5fyu6e().s[8]++;modelObj.create(params);}else{cov_yoc5fyu6e().b[0][1]++;}cov_yoc5fyu6e().s[9]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[10]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * update in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */update(controllerName,actionName){cov_yoc5fyu6e().f[1]++;cov_yoc5fyu6e().s[11]++;try{const params=(cov_yoc5fyu6e().s[12]++,requestInstance.getParams());cov_yoc5fyu6e().s[13]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[1][0]++;const modelObj=(cov_yoc5fyu6e().s[14]++,this.getModel(controllerName));cov_yoc5fyu6e().s[15]++;modelObj.update(params);}else{cov_yoc5fyu6e().b[1][1]++;}cov_yoc5fyu6e().s[16]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[17]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * list in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */list(controllerName,actionName){cov_yoc5fyu6e().f[2]++;cov_yoc5fyu6e().s[18]++;try{const params=(cov_yoc5fyu6e().s[19]++,requestInstance.getParams());const modelObj=(cov_yoc5fyu6e().s[20]++,this.getModel(controllerName));let result=(cov_yoc5fyu6e().s[21]++,modelObj.list(params));cov_yoc5fyu6e().s[22]++;viewManager.setData(result);cov_yoc5fyu6e().s[23]++;return this.getView(controllerName,`${actionName}Data`);}catch(error){cov_yoc5fyu6e().s[24]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * delete in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     */delete(controllerName,actionName){cov_yoc5fyu6e().f[3]++;cov_yoc5fyu6e().s[25]++;try{const params=(cov_yoc5fyu6e().s[26]++,requestInstance.getParams());cov_yoc5fyu6e().s[27]++;if(Object.keys(params).length!=0){cov_yoc5fyu6e().b[2][0]++;const modelObj=(cov_yoc5fyu6e().s[28]++,this.getModel(controllerName));cov_yoc5fyu6e().s[29]++;modelObj.delete(params);}else{cov_yoc5fyu6e().b[2][1]++;}cov_yoc5fyu6e().s[30]++;return this.getView(controllerName,actionName);}catch(error){cov_yoc5fyu6e().s[31]++;throw new Error(error);}}/**
     * Loads the view for the default case for each of the controller i.e.,
     * student, teacher and course. It decides the viewing of default view on 
     * the grounds of controller name and action which are received as params
     * of the method.
     * @param {string} controllerName 
     */defaultView(controllerName,actionName){cov_yoc5fyu6e().f[4]++;cov_yoc5fyu6e().s[32]++;try{cov_yoc5fyu6e().s[33]++;return this.getView(controllerName,'defaultView');}catch(error){cov_yoc5fyu6e().s[34]++;throw new Error(error);}}/**
     * Dynamically calls the action specified in the params of the method. It
     * decides which CRUD operation to call for the controller and thus invokes
     * the CRUD operation by dynamically making the function call.
     * @param {string} controllerName 
     */ /* istanbul ignore next */performAction(controllerName,actionName){try{if(!actionName){actionName='defaultView';}return this[actionName](controllerName,actionName);}catch(error){throw new Error(error);}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,