function cov_10dm9fpkdk(){var path="/var/www/html/mvc-node/core/models/crudModel.js";var hash="4a2a618989443b15e2b4bb260fda4bc234de8cc7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/mvc-node/core/models/crudModel.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:82}},"1":{start:{line:2,column:18},end:{line:2,column:57}},"2":{start:{line:47,column:8},end:{line:54,column:9}},"3":{start:{line:48,column:12},end:{line:48,column:47}},"4":{start:{line:49,column:30},end:{line:49,column:72}},"5":{start:{line:50,column:12},end:{line:50,column:60}},"6":{start:{line:53,column:12},end:{line:53,column:35}},"7":{start:{line:66,column:8},end:{line:73,column:9}},"8":{start:{line:67,column:12},end:{line:67,column:47}},"9":{start:{line:68,column:30},end:{line:68,column:72}},"10":{start:{line:69,column:12},end:{line:69,column:60}},"11":{start:{line:72,column:12},end:{line:72,column:35}},"12":{start:{line:85,column:8},end:{line:92,column:9}},"13":{start:{line:86,column:12},end:{line:86,column:47}},"14":{start:{line:87,column:30},end:{line:87,column:70}},"15":{start:{line:88,column:12},end:{line:88,column:60}},"16":{start:{line:91,column:12},end:{line:91,column:35}},"17":{start:{line:104,column:8},end:{line:111,column:9}},"18":{start:{line:105,column:12},end:{line:105,column:47}},"19":{start:{line:106,column:30},end:{line:106,column:72}},"20":{start:{line:107,column:12},end:{line:107,column:60}},"21":{start:{line:110,column:12},end:{line:110,column:35}},"22":{start:{line:114,column:0},end:{line:114,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:19},end:{line:55,column:5}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:19},end:{line:74,column:5}},line:65},"2":{name:"(anonymous_2)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:17},end:{line:93,column:5}},line:84},"3":{name:"(anonymous_3)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:19},end:{line:112,column:5}},line:103}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4a2a618989443b15e2b4bb260fda4bc234de8cc7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_10dm9fpkdk=function(){return actualCoverage;};}return actualCoverage;}cov_10dm9fpkdk();const autoload=(cov_10dm9fpkdk().s[0]++,require(`${process.env.FILEPATH}/core/autoload.js`).getInstance());const dbFactory=(cov_10dm9fpkdk().s[1]++,new(autoload.getFileName('dbFactory'))());/** Class representing CRUD operations which will be responsible for creating,
 * updating, deleting and listing records. These CRUD operations are perfomed
 * for the specific model and thus querybuilder is responsible for generating
 * the query and returning its results back. This class also handles the use of
 * driver instance which will run the query.
 */class CRUDModel{/**
     * Returns the driver object of the specified database. 
     * @return {object} Driver object.
     */ /* istanbul ignore next */getDriver(){return dbFactory.loadDriver();}/**
     * Returns the querybuilder object of the specified database. 
     * @return {object} QueryBuilder object.
     */ /* istanbul ignore next */getQueryBuilder(){return dbFactory.loadQueryBuilder();}/**
     * Returns the entity object. 
     * @return {object} Entity object.
     */ /* istanbul ignore next */getEntity(){return this.entity;}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the insert query and 
     * execute it respectively.
     * @param {object} params 
     * @returns {Object} query object.
     */create(params){cov_10dm9fpkdk().f[0]++;cov_10dm9fpkdk().s[2]++;try{cov_10dm9fpkdk().s[3]++;this.getEntity().setEntity(params);let queryString=(cov_10dm9fpkdk().s[4]++,this.getQueryBuilder().create(this.entity));cov_10dm9fpkdk().s[5]++;return this.getDriver().runQuery(queryString);}catch(error){cov_10dm9fpkdk().s[6]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the update query and 
     * execute it respectively.
     * @param {object} params 
     * @returns {Object} query object.
     */update(params){cov_10dm9fpkdk().f[1]++;cov_10dm9fpkdk().s[7]++;try{cov_10dm9fpkdk().s[8]++;this.getEntity().setEntity(params);let queryString=(cov_10dm9fpkdk().s[9]++,this.getQueryBuilder().update(this.entity));cov_10dm9fpkdk().s[10]++;return this.getDriver().runQuery(queryString);}catch(error){cov_10dm9fpkdk().s[11]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the select query and 
     * execute it respectively.
     * @param {object} params 
     * @returns {Object} query object.
     */list(params){cov_10dm9fpkdk().f[2]++;cov_10dm9fpkdk().s[12]++;try{cov_10dm9fpkdk().s[13]++;this.getEntity().setEntity(params);let queryString=(cov_10dm9fpkdk().s[14]++,this.getQueryBuilder().list(this.entity));cov_10dm9fpkdk().s[15]++;return this.getDriver().runQuery(queryString);}catch(error){cov_10dm9fpkdk().s[16]++;throw new Error(error);}}/**
     * Initialises the metadata of respective model as it takes params as a 
     * parameter, gets the querybuilder and driver instance by invoking getter
     * and setter for each of them which will generate the delete query and 
     * execute it respectively.
     * @param {object} params 
     * @returns {Object} query object.
     */delete(params){cov_10dm9fpkdk().f[3]++;cov_10dm9fpkdk().s[17]++;try{cov_10dm9fpkdk().s[18]++;this.getEntity().setEntity(params);let queryString=(cov_10dm9fpkdk().s[19]++,this.getQueryBuilder().delete(this.entity));cov_10dm9fpkdk().s[20]++;return this.getDriver().runQuery(queryString);}catch(error){cov_10dm9fpkdk().s[21]++;throw new Error(error);}}}cov_10dm9fpkdk().s[22]++;module.exports=CRUDModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,