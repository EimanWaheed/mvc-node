function cov_1cpwribkjk(){var path="/var/www/html/mvc-node/core/controllers/restController.js";var hash="5f80573b1a3ba8985b22cf94bae9bd45afd28c65";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/mvc-node/core/controllers/restController.js",statementMap:{"0":{start:{line:46,column:8},end:{line:56,column:9}},"1":{start:{line:47,column:27},end:{line:47,column:54}},"2":{start:{line:48,column:12},end:{line:51,column:13}},"3":{start:{line:49,column:33},end:{line:49,column:62}},"4":{start:{line:50,column:16},end:{line:50,column:40}},"5":{start:{line:52,column:12},end:{line:52,column:60}},"6":{start:{line:55,column:12},end:{line:55,column:35}},"7":{start:{line:70,column:8},end:{line:80,column:9}},"8":{start:{line:71,column:27},end:{line:71,column:54}},"9":{start:{line:72,column:12},end:{line:75,column:13}},"10":{start:{line:73,column:33},end:{line:73,column:62}},"11":{start:{line:74,column:16},end:{line:74,column:40}},"12":{start:{line:76,column:12},end:{line:76,column:60}},"13":{start:{line:79,column:12},end:{line:79,column:35}},"14":{start:{line:94,column:8},end:{line:103,column:9}},"15":{start:{line:95,column:27},end:{line:95,column:54}},"16":{start:{line:96,column:29},end:{line:96,column:58}},"17":{start:{line:97,column:25},end:{line:97,column:46}},"18":{start:{line:98,column:12},end:{line:98,column:40}},"19":{start:{line:99,column:12},end:{line:99,column:69}},"20":{start:{line:102,column:12},end:{line:102,column:35}},"21":{start:{line:118,column:8},end:{line:128,column:9}},"22":{start:{line:119,column:27},end:{line:119,column:54}},"23":{start:{line:120,column:12},end:{line:123,column:13}},"24":{start:{line:121,column:33},end:{line:121,column:62}},"25":{start:{line:122,column:16},end:{line:122,column:40}},"26":{start:{line:124,column:12},end:{line:124,column:60}},"27":{start:{line:127,column:12},end:{line:127,column:35}},"28":{start:{line:140,column:8},end:{line:145,column:9}},"29":{start:{line:141,column:12},end:{line:141,column:63}},"30":{start:{line:144,column:12},end:{line:144,column:35}},"31":{start:{line:169,column:0},end:{line:169,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:39},end:{line:57,column:5}},line:45},"1":{name:"(anonymous_1)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:39},end:{line:81,column:5}},line:69},"2":{name:"(anonymous_2)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:37},end:{line:105,column:5}},line:93},"3":{name:"(anonymous_3)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:39},end:{line:129,column:5}},line:117},"4":{name:"(anonymous_4)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:44},end:{line:146,column:5}},line:139}},branchMap:{"0":{loc:{start:{line:48,column:12},end:{line:51,column:13}},type:"if",locations:[{start:{line:48,column:12},end:{line:51,column:13}},{start:{line:48,column:12},end:{line:51,column:13}}],line:48},"1":{loc:{start:{line:72,column:12},end:{line:75,column:13}},type:"if",locations:[{start:{line:72,column:12},end:{line:75,column:13}},{start:{line:72,column:12},end:{line:75,column:13}}],line:72},"2":{loc:{start:{line:120,column:12},end:{line:123,column:13}},type:"if",locations:[{start:{line:120,column:12},end:{line:123,column:13}},{start:{line:120,column:12},end:{line:123,column:13}}],line:120}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5f80573b1a3ba8985b22cf94bae9bd45afd28c65"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1cpwribkjk=function(){return actualCoverage;};}return actualCoverage;}cov_1cpwribkjk();//const autoload = require(`${process.env.FILEPATH}/core/autoload.js`).getInstance();
//const requestInstance = (autoload.getFileName('request')).getInstance();
//const viewManager = new (autoload.getFileName('viewManager'));
/** Class representing CRUD operations which will be responsible for generating 
 * model object and returning the views for create, delete, list , update and default. 
 * These CRUD operations are perfomed for the specific controller and thus 
 * it generates the model object specified in each of these CRUD operations.
 * This class is also responsible for returning all the views for the specified 
 * controller and action.
 */class RestController{/**
     * Get the desired model.
     * @param {string} controllerName 
     * @returns {Object} model object.
     */ /* istanbul ignore next */getModel(controllerName){return new(autoload.getFileName('modelFactory'))().createModel(controllerName);}/**
     * Get the desired view.
     * @param {string} controllerName 
     * @param {string} actionName 
     * @returns {Object} response object.
     */ /* istanbul ignore next */getView(controllerName,actionName){return viewManager.loadView(controllerName,actionName);}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * create in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */create(controllerName,actionName){cov_1cpwribkjk().f[0]++;cov_1cpwribkjk().s[0]++;try{const params=(cov_1cpwribkjk().s[1]++,requestInstance.getParams());cov_1cpwribkjk().s[2]++;if(Object.keys(params).length!=0){cov_1cpwribkjk().b[0][0]++;const modelObj=(cov_1cpwribkjk().s[3]++,this.getModel(controllerName));cov_1cpwribkjk().s[4]++;modelObj.create(params);}else{cov_1cpwribkjk().b[0][1]++;}cov_1cpwribkjk().s[5]++;return this.getView(controllerName,actionName);}catch(error){cov_1cpwribkjk().s[6]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * update in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */update(controllerName,actionName){cov_1cpwribkjk().f[1]++;cov_1cpwribkjk().s[7]++;try{const params=(cov_1cpwribkjk().s[8]++,requestInstance.getParams());cov_1cpwribkjk().s[9]++;if(Object.keys(params).length!=0){cov_1cpwribkjk().b[1][0]++;const modelObj=(cov_1cpwribkjk().s[10]++,this.getModel(controllerName));cov_1cpwribkjk().s[11]++;modelObj.update(params);}else{cov_1cpwribkjk().b[1][1]++;}cov_1cpwribkjk().s[12]++;return this.getView(controllerName,actionName);}catch(error){cov_1cpwribkjk().s[13]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * list in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */list(controllerName,actionName){cov_1cpwribkjk().f[2]++;cov_1cpwribkjk().s[14]++;try{const params=(cov_1cpwribkjk().s[15]++,requestInstance.getParams());const modelObj=(cov_1cpwribkjk().s[16]++,this.getModel(controllerName));let result=(cov_1cpwribkjk().s[17]++,modelObj.list(params));cov_1cpwribkjk().s[18]++;viewManager.setData(result);cov_1cpwribkjk().s[19]++;return this.getView(controllerName,`${actionName}Data`);}catch(error){cov_1cpwribkjk().s[20]++;throw new Error(error);}}/**
     * Initialises the model object of the type specified in the request by 
     * invoking the createModel method of the modelFactory, as the object is 
     * created, it further invokes its respective CRUD operation which is
     * delete in this case and pass it the params achieved from request. The 
     * next main task is to load the views for the specfied controller and 
     * action and return it.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */delete(controllerName,actionName){cov_1cpwribkjk().f[3]++;cov_1cpwribkjk().s[21]++;try{const params=(cov_1cpwribkjk().s[22]++,requestInstance.getParams());cov_1cpwribkjk().s[23]++;if(Object.keys(params).length!=0){cov_1cpwribkjk().b[2][0]++;const modelObj=(cov_1cpwribkjk().s[24]++,this.getModel(controllerName));cov_1cpwribkjk().s[25]++;modelObj.delete(params);}else{cov_1cpwribkjk().b[2][1]++;}cov_1cpwribkjk().s[26]++;return this.getView(controllerName,actionName);}catch(error){cov_1cpwribkjk().s[27]++;throw new Error(error);}}/**
     * Loads the view for the default case for each of the controller i.e.,
     * student, teacher and course. It decides the viewing of default view on 
     * the grounds of controller name and action which are received as params
     * of the method.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */defaultView(controllerName,actionName){cov_1cpwribkjk().f[4]++;cov_1cpwribkjk().s[28]++;try{cov_1cpwribkjk().s[29]++;return this.getView(controllerName,'defaultView');}catch(error){cov_1cpwribkjk().s[30]++;throw new Error(error);}}/**
     * Dynamically calls the action specified in the params of the method. It
     * decides which CRUD operation to call for the controller and thus invokes
     * the CRUD operation by dynamically making the function call.
     * @param {string} controllerName 
     * @returns {Object} response object.
     */ /* istanbul ignore next */performAction(controllerName,actionName){try{if(!actionName){actionName='defaultView';}return this[actionName](controllerName,actionName);}catch(error){throw new Error(error);}}}cov_1cpwribkjk().s[31]++;module.exports=RestController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,